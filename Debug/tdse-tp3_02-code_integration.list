
tdse-tp3_02-code_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080036bc  080036bc  000046bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c4  080038c4  00005080  2**0
                  CONTENTS
  4 .ARM          00000008  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038cc  080038cc  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038cc  080038cc  000048cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038d0  080038d0  000048d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080038d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000080  08003954  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003954  00005348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079fa  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a37  00000000  00000000  0000caa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000530  00000000  00000000  0000ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2b  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dbb  00000000  00000000  00026d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083379  00000000  00000000  00030ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  000b3e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000b6500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080036a4 	.word	0x080036a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080036a4 	.word	0x080036a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 f8ea 	bl	8002338 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa20 	bl	80005a8 <HAL_Init>
  dwt_init();
 8000168:	f001 fb90 	bl	800188c <dwt_init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016c:	f000 f809 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000170:	f000 f872 	bl	8000258 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f846 	bl	8000204 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000178:	f001 fa5c 	bl	8001634 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
	  /* Application Update */
	  app_update();
 800017c:	f001 fb14 	bl	80017a8 <app_update>
 8000180:	e7fc      	b.n	800017c <main+0x20>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b090      	sub	sp, #64	@ 0x40
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0318 	add.w	r3, r7, #24
 800018c:	2228      	movs	r2, #40	@ 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fb56 	bl	8002842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a4:	2302      	movs	r3, #2
 80001a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ac:	2310      	movs	r3, #16
 80001ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b4:	2300      	movs	r3, #0
 80001b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fd48 	bl	8000c58 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ce:	f000 f8dd 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2102      	movs	r1, #2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 ffb5 	bl	800115c <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f8:	f000 f8c8 	bl	800038c <Error_Handler>
  }
}
 80001fc:	bf00      	nop
 80001fe:	3740      	adds	r7, #64	@ 0x40
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000208:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 800020a:	4a12      	ldr	r2, [pc, #72]	@ (8000254 <MX_USART2_UART_Init+0x50>)
 800020c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020e:	4b10      	ldr	r3, [pc, #64]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 8000210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000222:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 800022a:	220c      	movs	r2, #12
 800022c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022e:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800023a:	4805      	ldr	r0, [pc, #20]	@ (8000250 <MX_USART2_UART_Init+0x4c>)
 800023c:	f001 f91c 	bl	8001478 <HAL_UART_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000246:	f000 f8a1 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000009c 	.word	0x2000009c
 8000254:	40004400 	.word	0x40004400

08000258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026c:	4b42      	ldr	r3, [pc, #264]	@ (8000378 <MX_GPIO_Init+0x120>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a41      	ldr	r2, [pc, #260]	@ (8000378 <MX_GPIO_Init+0x120>)
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b3f      	ldr	r3, [pc, #252]	@ (8000378 <MX_GPIO_Init+0x120>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0310 	and.w	r3, r3, #16
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000284:	4b3c      	ldr	r3, [pc, #240]	@ (8000378 <MX_GPIO_Init+0x120>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a3b      	ldr	r2, [pc, #236]	@ (8000378 <MX_GPIO_Init+0x120>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b39      	ldr	r3, [pc, #228]	@ (8000378 <MX_GPIO_Init+0x120>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0320 	and.w	r3, r3, #32
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	4b36      	ldr	r3, [pc, #216]	@ (8000378 <MX_GPIO_Init+0x120>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a35      	ldr	r2, [pc, #212]	@ (8000378 <MX_GPIO_Init+0x120>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b33      	ldr	r3, [pc, #204]	@ (8000378 <MX_GPIO_Init+0x120>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b4:	4b30      	ldr	r3, [pc, #192]	@ (8000378 <MX_GPIO_Init+0x120>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <MX_GPIO_Init+0x120>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <MX_GPIO_Init+0x120>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0308 	and.w	r3, r3, #8
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80002d2:	482a      	ldr	r0, [pc, #168]	@ (800037c <MX_GPIO_Init+0x124>)
 80002d4:	f000 fc86 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80002de:	4828      	ldr	r0, [pc, #160]	@ (8000380 <MX_GPIO_Init+0x128>)
 80002e0:	f000 fc80 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2180      	movs	r1, #128	@ 0x80
 80002e8:	4826      	ldr	r0, [pc, #152]	@ (8000384 <MX_GPIO_Init+0x12c>)
 80002ea:	f000 fc7b 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f4:	4b24      	ldr	r3, [pc, #144]	@ (8000388 <MX_GPIO_Init+0x130>)
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4820      	ldr	r0, [pc, #128]	@ (8000384 <MX_GPIO_Init+0x12c>)
 8000304:	f000 faea 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8000308:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2301      	movs	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000316:	2302      	movs	r3, #2
 8000318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4816      	ldr	r0, [pc, #88]	@ (800037c <MX_GPIO_Init+0x124>)
 8000322:	f000 fadb 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000326:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032c:	2301      	movs	r3, #1
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	2302      	movs	r3, #2
 8000336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4810      	ldr	r0, [pc, #64]	@ (8000380 <MX_GPIO_Init+0x128>)
 8000340:	f000 facc 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000344:	2380      	movs	r3, #128	@ 0x80
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2302      	movs	r3, #2
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	480a      	ldr	r0, [pc, #40]	@ (8000384 <MX_GPIO_Init+0x12c>)
 800035c:	f000 fabe 	bl	80008dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	2028      	movs	r0, #40	@ 0x28
 8000366:	f000 fa7c 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036a:	2028      	movs	r0, #40	@ 0x28
 800036c:	f000 fa95 	bl	800089a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	40010c00 	.word	0x40010c00
 8000384:	40011000 	.word	0x40011000
 8000388:	10110000 	.word	0x10110000

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <Error_Handler+0x8>

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a14      	ldr	r2, [pc, #80]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <HAL_MspInit+0x60>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4a04      	ldr	r2, [pc, #16]	@ (80003f8 <HAL_MspInit+0x60>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010000 	.word	0x40010000

080003fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a15      	ldr	r2, [pc, #84]	@ (800046c <HAL_UART_MspInit+0x70>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d123      	bne.n	8000464 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <HAL_UART_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <HAL_UART_MspInit+0x74>)
 8000422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000426:	61d3      	str	r3, [r2, #28]
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <HAL_UART_MspInit+0x74>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <HAL_UART_MspInit+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <HAL_UART_MspInit+0x74>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <HAL_UART_MspInit+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800044c:	230c      	movs	r3, #12
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000450:	2302      	movs	r3, #2
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <HAL_UART_MspInit+0x78>)
 8000460:	f000 fa3c 	bl	80008dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40004400 	.word	0x40004400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <NMI_Handler+0x4>

08000480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <UsageFault_Handler+0x4>

080004a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f8b4 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 80004cc:	f000 f9ff 	bl	80008ce <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004dc:	f000 fb9a 	bl	8000c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	@ (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	@ (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f002 f9e4 	bl	80028e0 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20005000 	.word	0x20005000
 8000544:	00000400 	.word	0x00000400
 8000548:	200000e4 	.word	0x200000e4
 800054c:	20000348 	.word	0x20000348

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff fff8 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000562:	490c      	ldr	r1, [pc, #48]	@ (8000594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a09      	ldr	r2, [pc, #36]	@ (800059c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000578:	4c09      	ldr	r4, [pc, #36]	@ (80005a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f002 f9b1 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fde7 	bl	800015c <main>
  bx lr
 800058e:	4770      	bx	lr
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000598:	080038d4 	.word	0x080038d4
  ldr r2, =_sbss
 800059c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80005a0:	20000348 	.word	0x20000348

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_Init+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <HAL_Init+0x28>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f947 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f7ff fee8 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f95f 	bl	80008b6 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f927 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000
 800062c:	20000008 	.word	0x20000008
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x1c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_IncTick+0x20>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <HAL_IncTick+0x20>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000008 	.word	0x20000008
 8000654:	200000e8 	.word	0x200000e8

08000658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b02      	ldr	r3, [pc, #8]	@ (8000668 <HAL_GetTick+0x10>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	200000e8 	.word	0x200000e8

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff fff0 	bl	8000658 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_Delay+0x44>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffe0 	bl	8000658 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000008 	.word	0x20000008

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	@ (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	@ (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	@ 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	@ 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff90 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff2d 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff42 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff35 	bl	8000718 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008d2:	f000 ffc7 	bl	8001864 <HAL_SYSTICK_Callback>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	@ 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e169      	b.n	8000bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f0:	2201      	movs	r2, #1
 80008f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 8158 	bne.w	8000bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a9a      	ldr	r2, [pc, #616]	@ (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d05e      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000918:	4a98      	ldr	r2, [pc, #608]	@ (8000b7c <HAL_GPIO_Init+0x2a0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d875      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800091e:	4a98      	ldr	r2, [pc, #608]	@ (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d058      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000924:	4a96      	ldr	r2, [pc, #600]	@ (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d86f      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800092a:	4a96      	ldr	r2, [pc, #600]	@ (8000b84 <HAL_GPIO_Init+0x2a8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d052      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000930:	4a94      	ldr	r2, [pc, #592]	@ (8000b84 <HAL_GPIO_Init+0x2a8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d869      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000936:	4a94      	ldr	r2, [pc, #592]	@ (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d04c      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 800093c:	4a92      	ldr	r2, [pc, #584]	@ (8000b88 <HAL_GPIO_Init+0x2ac>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d863      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000942:	4a92      	ldr	r2, [pc, #584]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d046      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000948:	4a90      	ldr	r2, [pc, #576]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d85d      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800094e:	2b12      	cmp	r3, #18
 8000950:	d82a      	bhi.n	80009a8 <HAL_GPIO_Init+0xcc>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d859      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000956:	a201      	add	r2, pc, #4	@ (adr r2, 800095c <HAL_GPIO_Init+0x80>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	080009d7 	.word	0x080009d7
 8000960:	080009b1 	.word	0x080009b1
 8000964:	080009c3 	.word	0x080009c3
 8000968:	08000a05 	.word	0x08000a05
 800096c:	08000a0b 	.word	0x08000a0b
 8000970:	08000a0b 	.word	0x08000a0b
 8000974:	08000a0b 	.word	0x08000a0b
 8000978:	08000a0b 	.word	0x08000a0b
 800097c:	08000a0b 	.word	0x08000a0b
 8000980:	08000a0b 	.word	0x08000a0b
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a0b 	.word	0x08000a0b
 800098c:	08000a0b 	.word	0x08000a0b
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	08000a0b 	.word	0x08000a0b
 8000998:	08000a0b 	.word	0x08000a0b
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	4a79      	ldr	r2, [pc, #484]	@ (8000b90 <HAL_GPIO_Init+0x2b4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ae:	e02c      	b.n	8000a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e029      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e024      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	3308      	adds	r3, #8
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e01f      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	330c      	adds	r3, #12
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e01a      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009de:	2304      	movs	r3, #4
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e013      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	611a      	str	r2, [r3, #16]
          break;
 80009f6:	e009      	b.n	8000a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f8:	2308      	movs	r3, #8
 80009fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	615a      	str	r2, [r3, #20]
          break;
 8000a02:	e003      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          break;
 8000a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	@ 0xff
 8000a10:	d801      	bhi.n	8000a16 <HAL_GPIO_Init+0x13a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	e001      	b.n	8000a1a <HAL_GPIO_Init+0x13e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2bff      	cmp	r3, #255	@ 0xff
 8000a20:	d802      	bhi.n	8000a28 <HAL_GPIO_Init+0x14c>
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x152>
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	210f      	movs	r1, #15
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	6a39      	ldr	r1, [r7, #32]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80b1 	beq.w	8000bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a4c      	ldr	r2, [pc, #304]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a74:	4a48      	ldr	r2, [pc, #288]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a40      	ldr	r2, [pc, #256]	@ (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1ec>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba0 <HAL_GPIO_Init+0x2c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e8>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba4 <HAL_GPIO_Init+0x2c8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba8 <HAL_GPIO_Init+0x2cc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1e0>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ada:	492f      	ldr	r1, [pc, #188]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af4:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	492c      	ldr	r1, [pc, #176]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	608b      	str	r3, [r1, #8]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4928      	ldr	r1, [pc, #160]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	4922      	ldr	r1, [pc, #136]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60cb      	str	r3, [r1, #12]
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	491e      	ldr	r1, [pc, #120]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4918      	ldr	r1, [pc, #96]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4914      	ldr	r1, [pc, #80]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d021      	beq.n	8000bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	490e      	ldr	r1, [pc, #56]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
 8000b78:	e021      	b.n	8000bbe <HAL_GPIO_Init+0x2e2>
 8000b7a:	bf00      	nop
 8000b7c:	10320000 	.word	0x10320000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10220000 	.word	0x10220000
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	10120000 	.word	0x10120000
 8000b90:	10110000 	.word	0x10110000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40011400 	.word	0x40011400
 8000bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_GPIO_Init+0x304>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4909      	ldr	r1, [pc, #36]	@ (8000be0 <HAL_GPIO_Init+0x304>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bca:	fa22 f303 	lsr.w	r3, r2, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f47f ae8e 	bne.w	80008f0 <HAL_GPIO_Init+0x14>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	@ 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c00:	e003      	b.n	8000c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f806 	bl	8000c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010400 	.word	0x40010400

08000c44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e272      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8087 	beq.w	8000d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c78:	4b92      	ldr	r3, [pc, #584]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d00c      	beq.n	8000c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c84:	4b8f      	ldr	r3, [pc, #572]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b08      	cmp	r3, #8
 8000c8e:	d112      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x5e>
 8000c90:	4b8c      	ldr	r3, [pc, #560]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9e:	4b89      	ldr	r3, [pc, #548]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d06c      	beq.n	8000d84 <HAL_RCC_OscConfig+0x12c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d168      	bne.n	8000d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e24c      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cbe:	d106      	bne.n	8000cce <HAL_RCC_OscConfig+0x76>
 8000cc0:	4b80      	ldr	r3, [pc, #512]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e02e      	b.n	8000d2c <HAL_RCC_OscConfig+0xd4>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x98>
 8000cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a7a      	ldr	r2, [pc, #488]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b78      	ldr	r3, [pc, #480]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a77      	ldr	r2, [pc, #476]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e01d      	b.n	8000d2c <HAL_RCC_OscConfig+0xd4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0xbc>
 8000cfa:	4b72      	ldr	r3, [pc, #456]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a71      	ldr	r2, [pc, #452]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e00b      	b.n	8000d2c <HAL_RCC_OscConfig+0xd4>
 8000d14:	4b6b      	ldr	r3, [pc, #428]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a6a      	ldr	r2, [pc, #424]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b68      	ldr	r3, [pc, #416]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a67      	ldr	r2, [pc, #412]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d013      	beq.n	8000d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fc90 	bl	8000658 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fc8c 	bl	8000658 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	@ 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e200      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0xe4>
 8000d5a:	e014      	b.n	8000d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fc7c 	bl	8000658 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fc78 	bl	8000658 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	@ 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e1ec      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	4b53      	ldr	r3, [pc, #332]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0x10c>
 8000d82:	e000      	b.n	8000d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d063      	beq.n	8000e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d92:	4b4c      	ldr	r3, [pc, #304]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00b      	beq.n	8000db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9e:	4b49      	ldr	r3, [pc, #292]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d11c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x18c>
 8000daa:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d116      	bne.n	8000de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_RCC_OscConfig+0x176>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d001      	beq.n	8000dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e1c0      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dce:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	4939      	ldr	r1, [pc, #228]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de2:	e03a      	b.n	8000e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d020      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dec:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <HAL_RCC_OscConfig+0x270>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fc31 	bl	8000658 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fc2d 	bl	8000658 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e1a1      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4927      	ldr	r1, [pc, #156]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <HAL_RCC_OscConfig+0x270>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fc10 	bl	8000658 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fc0c 	bl	8000658 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e180      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03a      	beq.n	8000edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d019      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e74:	f7ff fbf0 	bl	8000658 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fbec 	bl	8000658 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e160      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 face 	bl	800143c <RCC_Delay>
 8000ea0:	e01c      	b.n	8000edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea8:	f7ff fbd6 	bl	8000658 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eae:	e00f      	b.n	8000ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fbd2 	bl	8000658 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d908      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e146      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	42420000 	.word	0x42420000
 8000ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed0:	4b92      	ldr	r3, [pc, #584]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e9      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80a6 	beq.w	8001036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	4b8b      	ldr	r3, [pc, #556]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10d      	bne.n	8000f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b88      	ldr	r3, [pc, #544]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a87      	ldr	r2, [pc, #540]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b85      	ldr	r3, [pc, #532]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f12:	2301      	movs	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f16:	4b82      	ldr	r3, [pc, #520]	@ (8001120 <HAL_RCC_OscConfig+0x4c8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d118      	bne.n	8000f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f22:	4b7f      	ldr	r3, [pc, #508]	@ (8001120 <HAL_RCC_OscConfig+0x4c8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7e      	ldr	r2, [pc, #504]	@ (8001120 <HAL_RCC_OscConfig+0x4c8>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb93 	bl	8000658 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f36:	f7ff fb8f 	bl	8000658 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b64      	cmp	r3, #100	@ 0x64
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e103      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	4b75      	ldr	r3, [pc, #468]	@ (8001120 <HAL_RCC_OscConfig+0x4c8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x312>
 8000f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a6e      	ldr	r2, [pc, #440]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e02d      	b.n	8000fc6 <HAL_RCC_OscConfig+0x36e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x334>
 8000f72:	4b6a      	ldr	r3, [pc, #424]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a69      	ldr	r2, [pc, #420]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	6213      	str	r3, [r2, #32]
 8000f7e:	4b67      	ldr	r3, [pc, #412]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a66      	ldr	r2, [pc, #408]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	f023 0304 	bic.w	r3, r3, #4
 8000f88:	6213      	str	r3, [r2, #32]
 8000f8a:	e01c      	b.n	8000fc6 <HAL_RCC_OscConfig+0x36e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d10c      	bne.n	8000fae <HAL_RCC_OscConfig+0x356>
 8000f94:	4b61      	ldr	r3, [pc, #388]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	4a60      	ldr	r2, [pc, #384]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6213      	str	r3, [r2, #32]
 8000fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6213      	str	r3, [r2, #32]
 8000fac:	e00b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x36e>
 8000fae:	4b5b      	ldr	r3, [pc, #364]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	4b58      	ldr	r3, [pc, #352]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a57      	ldr	r2, [pc, #348]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d015      	beq.n	8000ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb43 	bl	8000658 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb3f 	bl	8000658 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e0b1      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	4b4b      	ldr	r3, [pc, #300]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0ee      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x37e>
 8000ff8:	e014      	b.n	8001024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fb2d 	bl	8000658 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fb29 	bl	8000658 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e09b      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	4b40      	ldr	r3, [pc, #256]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1ee      	bne.n	8001002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d105      	bne.n	8001036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800102a:	4b3c      	ldr	r3, [pc, #240]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a3b      	ldr	r2, [pc, #236]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8087 	beq.w	800114e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001040:	4b36      	ldr	r3, [pc, #216]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d061      	beq.n	8001110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d146      	bne.n	80010e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001054:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <HAL_RCC_OscConfig+0x4cc>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fafd 	bl	8000658 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001062:	f7ff faf9 	bl	8000658 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e06d      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f0      	bne.n	8001062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001088:	d108      	bne.n	800109c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4921      	ldr	r1, [pc, #132]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a19      	ldr	r1, [r3, #32]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	430b      	orrs	r3, r1
 80010ae:	491b      	ldr	r1, [pc, #108]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x4cc>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff facd 	bl	8000658 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fac9 	bl	8000658 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e03d      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x46a>
 80010e0:	e035      	b.n	800114e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_RCC_OscConfig+0x4cc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fab6 	bl	8000658 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f0:	f7ff fab2 	bl	8000658 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e026      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_RCC_OscConfig+0x4c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x498>
 800110e:	e01e      	b.n	800114e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d107      	bne.n	8001128 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e019      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
 800111c:	40021000 	.word	0x40021000
 8001120:	40007000 	.word	0x40007000
 8001124:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_RCC_OscConfig+0x500>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	429a      	cmp	r2, r3
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	429a      	cmp	r2, r3
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0d0      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001170:	4b6a      	ldr	r3, [pc, #424]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d910      	bls.n	80011a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b67      	ldr	r3, [pc, #412]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 0207 	bic.w	r2, r3, #7
 8001186:	4965      	ldr	r1, [pc, #404]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b63      	ldr	r3, [pc, #396]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0b8      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a58      	ldr	r2, [pc, #352]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4b50      	ldr	r3, [pc, #320]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	494d      	ldr	r1, [pc, #308]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d040      	beq.n	800127c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d115      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	4b41      	ldr	r3, [pc, #260]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e073      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e06b      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f023 0203 	bic.w	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4936      	ldr	r1, [pc, #216]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fa04 	bl	8000658 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	e00a      	b.n	800126a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7ff fa00 	bl	8000658 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e053      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 020c 	and.w	r2, r3, #12
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	429a      	cmp	r2, r3
 800127a:	d1eb      	bne.n	8001254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800127c:	4b27      	ldr	r3, [pc, #156]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d210      	bcs.n	80012ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b24      	ldr	r3, [pc, #144]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 0207 	bic.w	r2, r3, #7
 8001292:	4922      	ldr	r1, [pc, #136]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e032      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4916      	ldr	r1, [pc, #88]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	490e      	ldr	r1, [pc, #56]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ea:	f000 f821 	bl	8001330 <HAL_RCC_GetSysClockFreq>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	490a      	ldr	r1, [pc, #40]	@ (8001324 <HAL_RCC_ClockConfig+0x1c8>)
 80012fc:	5ccb      	ldrb	r3, [r1, r3]
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_RCC_ClockConfig+0x1cc>)
 8001304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_RCC_ClockConfig+0x1d0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f962 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	40021000 	.word	0x40021000
 8001324:	08003838 	.word	0x08003838
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d002      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x30>
 800135a:	2b08      	cmp	r3, #8
 800135c:	d003      	beq.n	8001366 <HAL_RCC_GetSysClockFreq+0x36>
 800135e:	e027      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001362:	613b      	str	r3, [r7, #16]
      break;
 8001364:	e027      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d010      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0c5b      	lsrs	r3, r3, #17
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001392:	fb03 f202 	mul.w	r2, r3, r2
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	fbb2 f3f3 	udiv	r3, r2, r3
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e004      	b.n	80013aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	613b      	str	r3, [r7, #16]
      break;
 80013ae:	e002      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80013b2:	613b      	str	r3, [r7, #16]
      break;
 80013b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013b6:	693b      	ldr	r3, [r7, #16]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	007a1200 	.word	0x007a1200
 80013cc:	08003850 	.word	0x08003850
 80013d0:	08003860 	.word	0x08003860
 80013d4:	003d0900 	.word	0x003d0900

080013d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013dc:	4b02      	ldr	r3, [pc, #8]	@ (80013e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff2 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	@ (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	08003848 	.word	0x08003848

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001418:	f7ff ffde 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0adb      	lsrs	r3, r3, #11
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	@ (8001438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	08003848 	.word	0x08003848

0800143c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <RCC_Delay+0x34>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <RCC_Delay+0x38>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0a5b      	lsrs	r3, r3, #9
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001458:	bf00      	nop
  }
  while (Delay --);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	60fa      	str	r2, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f9      	bne.n	8001458 <RCC_Delay+0x1c>
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000000 	.word	0x20000000
 8001474:	10624dd3 	.word	0x10624dd3

08001478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e042      	b.n	8001510 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7fe ffac 	bl	80003fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	@ 0x24
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f82b 	bl	8001518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2220      	movs	r2, #32
 80014fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2220      	movs	r2, #32
 8001504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001552:	f023 030c 	bic.w	r3, r3, #12
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	430b      	orrs	r3, r1
 800155e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2c      	ldr	r2, [pc, #176]	@ (800162c <UART_SetConfig+0x114>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d103      	bne.n	8001588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001580:	f7ff ff48 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	e002      	b.n	800158e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001588:	f7ff ff30 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 800158c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009a      	lsls	r2, r3, #2
 8001598:	441a      	add	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a4:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <UART_SetConfig+0x118>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	0119      	lsls	r1, r3, #4
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009a      	lsls	r2, r3, #2
 80015b8:	441a      	add	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <UART_SetConfig+0x118>)
 80015c6:	fba3 0302 	umull	r0, r3, r3, r2
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2064      	movs	r0, #100	@ 0x64
 80015ce:	fb00 f303 	mul.w	r3, r0, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	3332      	adds	r3, #50	@ 0x32
 80015d8:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <UART_SetConfig+0x118>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e4:	4419      	add	r1, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009a      	lsls	r2, r3, #2
 80015f0:	441a      	add	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <UART_SetConfig+0x118>)
 80015fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2064      	movs	r0, #100	@ 0x64
 8001606:	fb00 f303 	mul.w	r3, r0, r3
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	3332      	adds	r3, #50	@ 0x32
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <UART_SetConfig+0x118>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	f003 020f 	and.w	r2, r3, #15
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	440a      	add	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40013800 	.word	0x40013800
 8001630:	51eb851f 	.word	0x51eb851f

08001634 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800163a:	b672      	cpsid	i
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <app_init+0x134>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <app_init+0x138>)
 8001642:	213f      	movs	r1, #63	@ 0x3f
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f885 	bl	8002754 <sniprintf>
 800164a:	4603      	mov	r3, r0
 800164c:	4a48      	ldr	r2, [pc, #288]	@ (8001770 <app_init+0x13c>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b45      	ldr	r3, [pc, #276]	@ (8001768 <app_init+0x134>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fb4d 	bl	8001cf4 <logger_log_print_>
 800165a:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 800165c:	b672      	cpsid	i
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <app_init+0x134>)
 8001660:	681c      	ldr	r4, [r3, #0]
 8001662:	f7fe fff9 	bl	8000658 <HAL_GetTick>
 8001666:	4603      	mov	r3, r0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <app_init+0x140>)
 800166c:	4a42      	ldr	r2, [pc, #264]	@ (8001778 <app_init+0x144>)
 800166e:	213f      	movs	r1, #63	@ 0x3f
 8001670:	4620      	mov	r0, r4
 8001672:	f001 f86f 	bl	8002754 <sniprintf>
 8001676:	4603      	mov	r3, r0
 8001678:	4a3d      	ldr	r2, [pc, #244]	@ (8001770 <app_init+0x13c>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <app_init+0x134>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fb37 	bl	8001cf4 <logger_log_print_>
 8001686:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001688:	b672      	cpsid	i
 800168a:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <app_init+0x134>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <app_init+0x148>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	213f      	movs	r1, #63	@ 0x3f
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f85d 	bl	8002754 <sniprintf>
 800169a:	4603      	mov	r3, r0
 800169c:	4a34      	ldr	r2, [pc, #208]	@ (8001770 <app_init+0x13c>)
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <app_init+0x134>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fb25 	bl	8001cf4 <logger_log_print_>
 80016aa:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80016ac:	b672      	cpsid	i
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <app_init+0x134>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a33      	ldr	r2, [pc, #204]	@ (8001780 <app_init+0x14c>)
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	213f      	movs	r1, #63	@ 0x3f
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 f84b 	bl	8002754 <sniprintf>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001770 <app_init+0x13c>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <app_init+0x134>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fb13 	bl	8001cf4 <logger_log_print_>
 80016ce:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <app_init+0x150>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 80016d6:	b672      	cpsid	i
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <app_init+0x134>)
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <app_init+0x150>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <app_init+0x154>)
 80016e4:	4a29      	ldr	r2, [pc, #164]	@ (800178c <app_init+0x158>)
 80016e6:	213f      	movs	r1, #63	@ 0x3f
 80016e8:	f001 f834 	bl	8002754 <sniprintf>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <app_init+0x13c>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <app_init+0x134>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fafc 	bl	8001cf4 <logger_log_print_>
 80016fc:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e012      	b.n	800172a <app_init+0xf6>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001704:	4922      	ldr	r1, [pc, #136]	@ (8001790 <app_init+0x15c>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	4610      	mov	r0, r2
 8001718:	4798      	blx	r3

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 800171a:	4a1e      	ldr	r2, [pc, #120]	@ (8001794 <app_init+0x160>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2100      	movs	r1, #0
 8001720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0e9      	beq.n	8001704 <app_init+0xd0>
	}

	cycle_counter_init();
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <app_init+0x164>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <app_init+0x164>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	60d3      	str	r3, [r2, #12]
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <app_init+0x168>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <app_init+0x168>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a15      	ldr	r2, [pc, #84]	@ (800179c <app_init+0x168>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 800174e:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <app_init+0x16c>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
	g_task_test_tick_cnt = G_APP_TICK_CNT_INI;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <app_init+0x170>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 800175c:	b662      	cpsie	i
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	08003870 	.word	0x08003870
 800176c:	08003708 	.word	0x08003708
 8001770:	20000140 	.word	0x20000140
 8001774:	0800370c 	.word	0x0800370c
 8001778:	08003718 	.word	0x08003718
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000010 	.word	0x20000010
 8001784:	200000ec 	.word	0x200000ec
 8001788:	0800373c 	.word	0x0800373c
 800178c:	08003748 	.word	0x08003748
 8001790:	08003864 	.word	0x08003864
 8001794:	200000f8 	.word	0x200000f8
 8001798:	e000edf0 	.word	0xe000edf0
 800179c:	e0001000 	.word	0xe0001000
 80017a0:	200000f4 	.word	0x200000f4
 80017a4:	2000014c 	.word	0x2000014c

080017a8 <app_update>:

void app_update(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <app_update+0x9c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d041      	beq.n	800183a <app_update+0x92>
    {
    	g_app_tick_cnt--;
 80017b6:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <app_update+0x9c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a21      	ldr	r2, [pc, #132]	@ (8001844 <app_update+0x9c>)
 80017be:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <app_update+0xa0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <app_update+0xa0>)
 80017c8:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <app_update+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	e02e      	b.n	8001834 <app_update+0x8c>
    	{
			cycle_counter_reset();
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <app_update+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80017dc:	491d      	ldr	r1, [pc, #116]	@ (8001854 <app_update+0xac>)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	4610      	mov	r0, r2
 80017f2:	4798      	blx	r3

			cycle_counter_time_us = cycle_counter_time_us();
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <app_update+0xa8>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <app_update+0xb0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4917      	ldr	r1, [pc, #92]	@ (800185c <app_update+0xb4>)
 80017fe:	fba1 1303 	umull	r1, r3, r1, r3
 8001802:	0c9b      	lsrs	r3, r3, #18
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <app_update+0xa4>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	4413      	add	r3, r2
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <app_update+0xa4>)
 8001814:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <app_update+0xb8>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d904      	bls.n	800182e <app_update+0x86>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001824:	490e      	ldr	r1, [pc, #56]	@ (8001860 <app_update+0xb8>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3301      	adds	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0cd      	beq.n	80017d6 <app_update+0x2e>
			}
	    }
    }
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200000f4 	.word	0x200000f4
 8001848:	200000ec 	.word	0x200000ec
 800184c:	200000f0 	.word	0x200000f0
 8001850:	e0001000 	.word	0xe0001000
 8001854:	08003864 	.word	0x08003864
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83
 8001860:	200000f8 	.word	0x200000f8

08001864 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_SYSTICK_Callback+0x20>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_SYSTICK_Callback+0x20>)
 8001870:	6013      	str	r3, [r2, #0]

	g_task_test_tick_cnt++;
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_SYSTICK_Callback+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <HAL_SYSTICK_Callback+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	200000f4 	.word	0x200000f4
 8001888:	2000014c 	.word	0x2000014c

0800188c <dwt_init>:
static void displayDataBusWrite( uint8_t dataByte );
static void displayCodeWrite( bool type, uint8_t dataBus );

//=====[Implementations of public functions]===================================
void dwt_init(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Habilita el DWT
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <dwt_init+0x2c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <dwt_init+0x2c>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189a:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                 // Reinicia contador
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <dwt_init+0x30>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;             // Habilita el contador
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <dwt_init+0x30>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <dwt_init+0x30>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000edf0 	.word	0xe000edf0
 80018bc:	e0001000 	.word	0xe0001000

080018c0 <delay_us>:

void delay_us(uint32_t us)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <delay_us+0x40>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000UL);  // ciclos por µs
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <delay_us+0x44>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <delay_us+0x48>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9a      	lsrs	r2, r3, #18
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - start) < ticks);
 80018e2:	bf00      	nop
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <delay_us+0x40>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d8f8      	bhi.n	80018e4 <delay_us+0x24>
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e0001000 	.word	0xe0001000
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <displayInit>:



void displayInit( displayConnection_t connection )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 8001916:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <displayInit+0xc8>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	7013      	strb	r3, [r2, #0]

    initial8BitCommunicationIsCompleted = false;
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <displayInit+0xcc>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

    HAL_Delay( 50 );
 8001922:	2032      	movs	r0, #50	@ 0x32
 8001924:	f7fe fea2 	bl	800066c <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001928:	2130      	movs	r1, #48	@ 0x30
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f8c2 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay( 5 );
 8001930:	2005      	movs	r0, #5
 8001932:	f7fe fe9b 	bl	800066c <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001936:	2130      	movs	r1, #48	@ 0x30
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f8bb 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    delay_us( 37 );
 800193e:	2025      	movs	r0, #37	@ 0x25
 8001940:	f7ff ffbe 	bl	80018c0 <delay_us>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001944:	2130      	movs	r1, #48	@ 0x30
 8001946:	2000      	movs	r0, #0
 8001948:	f000 f8b4 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    delay_us( 37 );
 800194c:	2025      	movs	r0, #37	@ 0x25
 800194e:	f7ff ffb7 	bl	80018c0 <delay_us>

    switch( display.connection ) {
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <displayInit+0xc8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <displayInit+0x62>
 800195a:	2b01      	cmp	r3, #1
 800195c:	d119      	bne.n	8001992 <displayInit+0x86>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800195e:	2138      	movs	r1, #56	@ 0x38
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f8a7 	bl	8001ab4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            delay_us( 37 );
 8001966:	2025      	movs	r0, #37	@ 0x25
 8001968:	f7ff ffaa 	bl	80018c0 <delay_us>
        break;
 800196c:	e011      	b.n	8001992 <displayInit+0x86>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800196e:	2120      	movs	r1, #32
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f89f 	bl	8001ab4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            delay_us( 37 );
 8001976:	2025      	movs	r0, #37	@ 0x25
 8001978:	f7ff ffa2 	bl	80018c0 <delay_us>

            initial8BitCommunicationIsCompleted = true;
 800197c:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <displayInit+0xcc>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001982:	2128      	movs	r1, #40	@ 0x28
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f895 	bl	8001ab4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            delay_us( 37 );
 800198a:	2025      	movs	r0, #37	@ 0x25
 800198c:	f7ff ff98 	bl	80018c0 <delay_us>
        break;
 8001990:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001992:	2108      	movs	r1, #8
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f88d 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    delay_us( 37 );
 800199a:	2025      	movs	r0, #37	@ 0x25
 800199c:	f7ff ff90 	bl	80018c0 <delay_us>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019a0:	2101      	movs	r1, #1
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f886 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    delay_us( 37 );
 80019a8:	2025      	movs	r0, #37	@ 0x25
 80019aa:	f7ff ff89 	bl	80018c0 <delay_us>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019ae:	2106      	movs	r1, #6
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 f87f 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    delay_us( 37 );
 80019b6:	2025      	movs	r0, #37	@ 0x25
 80019b8:	f7ff ff82 	bl	80018c0 <delay_us>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019bc:	210c      	movs	r1, #12
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f878 	bl	8001ab4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    delay_us( 37 );
 80019c4:	2025      	movs	r0, #37	@ 0x25
 80019c6:	f7ff ff7b 	bl	80018c0 <delay_us>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000fc 	.word	0x200000fc
 80019d8:	200000fd 	.word	0x200000fd

080019dc <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d846      	bhi.n	8001a80 <displayCharPositionWrite+0xa4>
 80019f2:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <displayCharPositionWrite+0x1c>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a21 	.word	0x08001a21
 8001a00:	08001a41 	.word	0x08001a41
 8001a04:	08001a61 	.word	0x08001a61
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f84e 	bl	8001ab4 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            delay_us( 37 );
 8001a18:	2025      	movs	r0, #37	@ 0x25
 8001a1a:	f7ff ff51 	bl	80018c0 <delay_us>
        break;
 8001a1e:	e02f      	b.n	8001a80 <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	3340      	adds	r3, #64	@ 0x40
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a2c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f83e 	bl	8001ab4 <displayCodeWrite>
                                charPositionX ) );
            delay_us( 37 );
 8001a38:	2025      	movs	r0, #37	@ 0x25
 8001a3a:	f7ff ff41 	bl	80018c0 <delay_us>
        break;
 8001a3e:	e01f      	b.n	8001a80 <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	3314      	adds	r3, #20
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f82e 	bl	8001ab4 <displayCodeWrite>
                                charPositionX ) );
            delay_us( 37 );
 8001a58:	2025      	movs	r0, #37	@ 0x25
 8001a5a:	f7ff ff31 	bl	80018c0 <delay_us>
        break;
 8001a5e:	e00f      	b.n	8001a80 <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3354      	adds	r3, #84	@ 0x54
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a6c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f81e 	bl	8001ab4 <displayCodeWrite>
                                charPositionX ) );
            delay_us( 37 );
 8001a78:	2025      	movs	r0, #37	@ 0x25
 8001a7a:	f7ff ff21 	bl	80018c0 <delay_us>
        break;
 8001a7e:	bf00      	nop
    }
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a90:	e007      	b.n	8001aa2 <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f000 f809 	bl	8001ab4 <displayCodeWrite>
    while (*str) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f3      	bne.n	8001a92 <displayStringWrite+0xa>
    }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <displayCodeWrite>:

//=====[Implementations of private functions]==================================
static void displayCodeWrite( bool type, uint8_t dataBus )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71bb      	strb	r3, [r7, #6]
    if ( type == DISPLAY_RS_INSTRUCTION )
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f083 0301 	eor.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <displayCodeWrite+0x26>
        displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION );
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f000 f812 	bl	8001afc <displayPinWrite>
 8001ad8:	e003      	b.n	8001ae2 <displayCodeWrite+0x2e>
	else
        displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA );
 8001ada:	2101      	movs	r1, #1
 8001adc:	2004      	movs	r0, #4
 8001ade:	f000 f80d 	bl	8001afc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE );
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2005      	movs	r0, #5
 8001ae6:	f000 f809 	bl	8001afc <displayPinWrite>
    displayDataBusWrite( dataBus );
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f873 	bl	8001bd8 <displayDataBusWrite>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <displayPinWrite+0xcc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <displayPinWrite+0x1c>
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d154      	bne.n	8001bbe <displayPinWrite+0xc2>
                case DISPLAY_PIN_D7: displayD7 = value;   break;
                case DISPLAY_PIN_RS: displayRs = value;   break;
                case DISPLAY_PIN_EN: displayEn = value;   break;
                case DISPLAY_PIN_RW: break;
                */
                default: break;
 8001b14:	bf00      	nop
            }
            break;
 8001b16:	e052      	b.n	8001bbe <displayPinWrite+0xc2>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	2b0a      	cmp	r3, #10
 8001b1e:	d84c      	bhi.n	8001bba <displayPinWrite+0xbe>
 8001b20:	a201      	add	r2, pc, #4	@ (adr r2, 8001b28 <displayPinWrite+0x2c>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b99 	.word	0x08001b99
 8001b2c:	08001bbb 	.word	0x08001bbb
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bbb 	.word	0x08001bbb
 8001b38:	08001bbb 	.word	0x08001bbb
 8001b3c:	08001bbb 	.word	0x08001bbb
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b55 	.word	0x08001b55
 8001b48:	08001b65 	.word	0x08001b65
 8001b4c:	08001b75 	.word	0x08001b75
 8001b50:	08001b87 	.word	0x08001b87
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin((GPIO_TypeDef *)D4_GPIO_Port, (uint16_t)D4_Pin, (GPIO_PinState)value);    break;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	481b      	ldr	r0, [pc, #108]	@ (8001bcc <displayPinWrite+0xd0>)
 8001b5e:	f7ff f841 	bl	8000be4 <HAL_GPIO_WritePin>
 8001b62:	e02b      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin((GPIO_TypeDef *)D5_GPIO_Port, (uint16_t)D5_Pin, (GPIO_PinState)value);   break;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <displayPinWrite+0xd0>)
 8001b6e:	f7ff f839 	bl	8000be4 <HAL_GPIO_WritePin>
 8001b72:	e023      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin((GPIO_TypeDef *)D6_GPIO_Port, (uint16_t)D6_Pin, (GPIO_PinState)value);   break;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b7e:	4813      	ldr	r0, [pc, #76]	@ (8001bcc <displayPinWrite+0xd0>)
 8001b80:	f7ff f830 	bl	8000be4 <HAL_GPIO_WritePin>
 8001b84:	e01a      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin((GPIO_TypeDef *)D7_GPIO_Port, (uint16_t)D7_Pin, (GPIO_PinState)value);   break;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b90:	480f      	ldr	r0, [pc, #60]	@ (8001bd0 <displayPinWrite+0xd4>)
 8001b92:	f7ff f827 	bl	8000be4 <HAL_GPIO_WritePin>
 8001b96:	e011      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin((GPIO_TypeDef *)D8_GPIO_Port, (uint16_t)D8_Pin, (GPIO_PinState)value);   break;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba2:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <displayPinWrite+0xd4>)
 8001ba4:	f7ff f81e 	bl	8000be4 <HAL_GPIO_WritePin>
 8001ba8:	e008      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin((GPIO_TypeDef *)D9_GPIO_Port, (uint16_t)D9_Pin, (GPIO_PinState)value);   break;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <displayPinWrite+0xd8>)
 8001bb4:	f7ff f816 	bl	8000be4 <HAL_GPIO_WritePin>
 8001bb8:	e000      	b.n	8001bbc <displayPinWrite+0xc0>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001bba:	bf00      	nop
            }
            break;
 8001bbc:	bf00      	nop
    }
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000fc 	.word	0x200000fc
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40011000 	.word	0x40011000

08001bd8 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001be2:	2100      	movs	r1, #0
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ff89 	bl	8001afc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	200e      	movs	r0, #14
 8001bf4:	f7ff ff82 	bl	8001afc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfe:	4619      	mov	r1, r3
 8001c00:	200d      	movs	r0, #13
 8001c02:	f7ff ff7b 	bl	8001afc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	200c      	movs	r0, #12
 8001c10:	f7ff ff74 	bl	8001afc <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	200b      	movs	r0, #11
 8001c1e:	f7ff ff6d 	bl	8001afc <displayPinWrite>
    switch( display.connection ) {
 8001c22:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <displayDataBusWrite+0x114>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01e      	beq.n	8001c68 <displayDataBusWrite+0x90>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d14b      	bne.n	8001cc6 <displayDataBusWrite+0xee>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	4619      	mov	r1, r3
 8001c36:	200a      	movs	r0, #10
 8001c38:	f7ff ff60 	bl	8001afc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	2009      	movs	r0, #9
 8001c46:	f7ff ff59 	bl	8001afc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	4619      	mov	r1, r3
 8001c52:	2008      	movs	r0, #8
 8001c54:	f7ff ff52 	bl	8001afc <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2007      	movs	r0, #7
 8001c62:	f7ff ff4b 	bl	8001afc <displayPinWrite>
        break;
 8001c66:	e02e      	b.n	8001cc6 <displayDataBusWrite+0xee>

        case DISPLAY_CONNECTION_GPIO_4BITS:
            if ( initial8BitCommunicationIsCompleted == true) {
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <displayDataBusWrite+0x118>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d029      	beq.n	8001cc4 <displayDataBusWrite+0xec>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8001c70:	2101      	movs	r1, #1
 8001c72:	2006      	movs	r0, #6
 8001c74:	f7ff ff42 	bl	8001afc <displayPinWrite>
                delay_us( 37 );
 8001c78:	2025      	movs	r0, #37	@ 0x25
 8001c7a:	f7ff fe21 	bl	80018c0 <delay_us>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2006      	movs	r0, #6
 8001c82:	f7ff ff3b 	bl	8001afc <displayPinWrite>
                delay_us( 37 );
 8001c86:	2025      	movs	r0, #37	@ 0x25
 8001c88:	f7ff fe1a 	bl	80018c0 <delay_us>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	200e      	movs	r0, #14
 8001c96:	f7ff ff31 	bl	8001afc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	200d      	movs	r0, #13
 8001ca4:	f7ff ff2a 	bl	8001afc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	200c      	movs	r0, #12
 8001cb2:	f7ff ff23 	bl	8001afc <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	200b      	movs	r0, #11
 8001cc0:	f7ff ff1c 	bl	8001afc <displayPinWrite>
            }
        break;
 8001cc4:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f7ff ff17 	bl	8001afc <displayPinWrite>
    delay_us( 37 );
 8001cce:	2025      	movs	r0, #37	@ 0x25
 8001cd0:	f7ff fdf6 	bl	80018c0 <delay_us>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2006      	movs	r0, #6
 8001cd8:	f7ff ff10 	bl	8001afc <displayPinWrite>
    delay_us( 37 );
 8001cdc:	2025      	movs	r0, #37	@ 0x25
 8001cde:	f7ff fdef 	bl	80018c0 <delay_us>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000fc 	.word	0x200000fc
 8001cf0:	200000fd 	.word	0x200000fd

08001cf4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fd17 	bl	8002730 <iprintf>
	fflush(stdout);
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <logger_log_print_+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fc3b 	bl	8002584 <fflush>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000030 	.word	0x20000030

08001d1c <task_test_init>:
uint32_t g_task_test_cnt;
volatile uint32_t g_task_test_tick_cnt;

/********************** external functions definition ************************/
void task_test_init(void *parameters)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
	task_test_dta_t 	*p_task_test_dta;
	uint32_t			tick;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_test_init), p_task_test);
 8001d24:	b672      	cpsid	i
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <task_test_init+0xe8>)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <task_test_init+0xec>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <task_test_init+0xf0>)
 8001d32:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <task_test_init+0xf4>)
 8001d34:	213f      	movs	r1, #63	@ 0x3f
 8001d36:	f000 fd0d 	bl	8002754 <sniprintf>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a35      	ldr	r2, [pc, #212]	@ (8001e14 <task_test_init+0xf8>)
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b30      	ldr	r3, [pc, #192]	@ (8001e04 <task_test_init+0xe8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ffd5 	bl	8001cf4 <logger_log_print_>
 8001d4a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_test), p_task_test_);
 8001d4c:	b672      	cpsid	i
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <task_test_init+0xe8>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <task_test_init+0xfc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <task_test_init+0x100>)
 8001d5a:	4a31      	ldr	r2, [pc, #196]	@ (8001e20 <task_test_init+0x104>)
 8001d5c:	213f      	movs	r1, #63	@ 0x3f
 8001d5e:	f000 fcf9 	bl	8002754 <sniprintf>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <task_test_init+0xf8>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <task_test_init+0xe8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ffc1 	bl	8001cf4 <logger_log_print_>
 8001d72:	b662      	cpsie	i

	g_task_test_cnt = G_TASK_TEST_CNT_INIT;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <task_test_init+0x108>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_test_cnt), g_task_test_cnt);
 8001d7a:	b672      	cpsid	i
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <task_test_init+0xe8>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <task_test_init+0x108>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <task_test_init+0x10c>)
 8001d88:	4a28      	ldr	r2, [pc, #160]	@ (8001e2c <task_test_init+0x110>)
 8001d8a:	213f      	movs	r1, #63	@ 0x3f
 8001d8c:	f000 fce2 	bl	8002754 <sniprintf>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <task_test_init+0xf8>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <task_test_init+0xe8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ffaa 	bl	8001cf4 <logger_log_print_>
 8001da0:	b662      	cpsie	i

	/* Update Task Test Configuration & Data Pointer */
	p_task_test_dta = &task_test_dta;
 8001da2:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <task_test_init+0x114>)
 8001da4:	60fb      	str	r3, [r7, #12]

	tick = p_task_test_dta->tick;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]
	LOGGER_LOG("   %s = %lu", GET_NAME(tick), (uint32_t)tick);
 8001dac:	b672      	cpsid	i
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <task_test_init+0xe8>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <task_test_init+0x118>)
 8001db8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <task_test_init+0x11c>)
 8001dba:	213f      	movs	r1, #63	@ 0x3f
 8001dbc:	f000 fcca 	bl	8002754 <sniprintf>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <task_test_init+0xf8>)
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <task_test_init+0xe8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff92 	bl	8001cf4 <logger_log_print_>
 8001dd0:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fd9a 	bl	800190c <displayInit>

    displayCharPositionWrite(0, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fdfe 	bl	80019dc <displayCharPositionWrite>
	displayStringWrite("TdSE Bienvenidos");
 8001de0:	4816      	ldr	r0, [pc, #88]	@ (8001e3c <task_test_init+0x120>)
 8001de2:	f7ff fe51 	bl	8001a88 <displayStringWrite>

	displayCharPositionWrite(0, 1);
 8001de6:	2101      	movs	r1, #1
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fdf7 	bl	80019dc <displayCharPositionWrite>
	displayStringWrite("Test Nro: ");
 8001dee:	4814      	ldr	r0, [pc, #80]	@ (8001e40 <task_test_init+0x124>)
 8001df0:	f7ff fe4a 	bl	8001a88 <displayStringWrite>

	g_task_test_tick_cnt = G_TASK_TEST_TICK_CNT_INI;
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <task_test_init+0x128>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08003870 	.word	0x08003870
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	0800379c 	.word	0x0800379c
 8001e10:	080037ac 	.word	0x080037ac
 8001e14:	20000140 	.word	0x20000140
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	080037c4 	.word	0x080037c4
 8001e20:	080037d0 	.word	0x080037d0
 8001e24:	20000148 	.word	0x20000148
 8001e28:	080037e0 	.word	0x080037e0
 8001e2c:	080037f0 	.word	0x080037f0
 8001e30:	20000144 	.word	0x20000144
 8001e34:	08003800 	.word	0x08003800
 8001e38:	08003808 	.word	0x08003808
 8001e3c:	08003814 	.word	0x08003814
 8001e40:	08003828 	.word	0x08003828
 8001e44:	2000014c 	.word	0x2000014c

08001e48 <task_test_update>:

void task_test_update(void *parameters)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	task_test_dta_t *p_task_test_dta;
	bool b_time_update_required = false;
 8001e50:	2300      	movs	r3, #0
 8001e52:	75fb      	strb	r3, [r7, #23]
	char test_str[8];

	/* Update Task Test Counter */
	g_task_test_cnt++;
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <task_test_update+0xac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a26      	ldr	r2, [pc, #152]	@ (8001ef4 <task_test_update+0xac>)
 8001e5c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_test_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001e5e:	b672      	cpsid	i
    if (G_TASK_TEST_TICK_CNT_INI < g_task_test_tick_cnt)
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <task_test_update+0xb0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <task_test_update+0x2e>
    {
    	g_task_test_tick_cnt--;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <task_test_update+0xb0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <task_test_update+0xb0>)
 8001e70:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001e76:	b662      	cpsie	i

    while (b_time_update_required)
 8001e78:	e034      	b.n	8001ee4 <task_test_update+0x9c>
    {
    	/* Update Task Test Configuration & Data Pointer */
    	p_task_test_dta = &task_test_dta;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <task_test_update+0xb4>)
 8001e7c:	613b      	str	r3, [r7, #16]

    	if (DEL_TEST_XX_MIN < p_task_test_dta->tick)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <task_test_update+0x4a>
		{
			p_task_test_dta->tick--;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e018      	b.n	8001ec4 <task_test_update+0x7c>
		}
		else
		{
			p_task_test_dta->tick = DEL_TEST_XX_MAX ;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e98:	601a      	str	r2, [r3, #0]

			snprintf(test_str, sizeof(test_str), "%lu", (g_task_test_cnt/1000ul));
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <task_test_update+0xac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <task_test_update+0xb8>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	f107 0008 	add.w	r0, r7, #8
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <task_test_update+0xbc>)
 8001eac:	2108      	movs	r1, #8
 8001eae:	f000 fc51 	bl	8002754 <sniprintf>
			displayCharPositionWrite(10, 1);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f7ff fd91 	bl	80019dc <displayCharPositionWrite>
			displayStringWrite(test_str);
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fde2 	bl	8001a88 <displayStringWrite>
		}

    	/* Protect shared resource (g_task_test_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001ec4:	b672      	cpsid	i
		if (G_TASK_TEST_TICK_CNT_INI < g_task_test_tick_cnt)
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <task_test_update+0xb0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <task_test_update+0x96>
		{
			g_task_test_tick_cnt--;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <task_test_update+0xb0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <task_test_update+0xb0>)
 8001ed6:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	e001      	b.n	8001ee2 <task_test_update+0x9a>
		}
		else
		{
			b_time_update_required = false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001ee2:	b662      	cpsie	i
    while (b_time_update_required)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1c7      	bne.n	8001e7a <task_test_update+0x32>
    }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000148 	.word	0x20000148
 8001ef8:	2000014c 	.word	0x2000014c
 8001efc:	20000144 	.word	0x20000144
 8001f00:	10624dd3 	.word	0x10624dd3
 8001f04:	08003834 	.word	0x08003834

08001f08 <findslot>:
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <findslot+0x2c>)
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	b118      	cbz	r0, 8001f1a <findslot+0x12>
 8001f12:	6a03      	ldr	r3, [r0, #32]
 8001f14:	b90b      	cbnz	r3, 8001f1a <findslot+0x12>
 8001f16:	f000 fbd5 	bl	80026c4 <__sinit>
 8001f1a:	2c13      	cmp	r4, #19
 8001f1c:	d807      	bhi.n	8001f2e <findslot+0x26>
 8001f1e:	4806      	ldr	r0, [pc, #24]	@ (8001f38 <findslot+0x30>)
 8001f20:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001f24:	3201      	adds	r2, #1
 8001f26:	d002      	beq.n	8001f2e <findslot+0x26>
 8001f28:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e7fc      	b.n	8001f2c <findslot+0x24>
 8001f32:	bf00      	nop
 8001f34:	20000030 	.word	0x20000030
 8001f38:	2000015c 	.word	0x2000015c

08001f3c <error>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	4604      	mov	r4, r0
 8001f40:	f000 fcce 	bl	80028e0 <__errno>
 8001f44:	2613      	movs	r6, #19
 8001f46:	4605      	mov	r5, r0
 8001f48:	2700      	movs	r7, #0
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	4639      	mov	r1, r7
 8001f4e:	beab      	bkpt	0x00ab
 8001f50:	4606      	mov	r6, r0
 8001f52:	4620      	mov	r0, r4
 8001f54:	602e      	str	r6, [r5, #0]
 8001f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f58 <checkerror>:
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d101      	bne.n	8001f60 <checkerror+0x8>
 8001f5c:	f7ff bfee 	b.w	8001f3c <error>
 8001f60:	4770      	bx	lr

08001f62 <_swiread>:
 8001f62:	b530      	push	{r4, r5, lr}
 8001f64:	b085      	sub	sp, #20
 8001f66:	2406      	movs	r4, #6
 8001f68:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f6c:	9203      	str	r2, [sp, #12]
 8001f6e:	ad01      	add	r5, sp, #4
 8001f70:	4620      	mov	r0, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	beab      	bkpt	0x00ab
 8001f76:	4604      	mov	r4, r0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff ffed 	bl	8001f58 <checkerror>
 8001f7e:	b005      	add	sp, #20
 8001f80:	bd30      	pop	{r4, r5, pc}

08001f82 <_read>:
 8001f82:	b570      	push	{r4, r5, r6, lr}
 8001f84:	460e      	mov	r6, r1
 8001f86:	4614      	mov	r4, r2
 8001f88:	f7ff ffbe 	bl	8001f08 <findslot>
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	b930      	cbnz	r0, 8001f9e <_read+0x1c>
 8001f90:	f000 fca6 	bl	80028e0 <__errno>
 8001f94:	2309      	movs	r3, #9
 8001f96:	6003      	str	r3, [r0, #0]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4631      	mov	r1, r6
 8001fa2:	6800      	ldr	r0, [r0, #0]
 8001fa4:	f7ff ffdd 	bl	8001f62 <_swiread>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	d0f5      	beq.n	8001f98 <_read+0x16>
 8001fac:	686b      	ldr	r3, [r5, #4]
 8001fae:	1a20      	subs	r0, r4, r0
 8001fb0:	4403      	add	r3, r0
 8001fb2:	606b      	str	r3, [r5, #4]
 8001fb4:	e7f2      	b.n	8001f9c <_read+0x1a>

08001fb6 <_swilseek>:
 8001fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb8:	460c      	mov	r4, r1
 8001fba:	4616      	mov	r6, r2
 8001fbc:	f7ff ffa4 	bl	8001f08 <findslot>
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	b940      	cbnz	r0, 8001fd6 <_swilseek+0x20>
 8001fc4:	f000 fc8c 	bl	80028e0 <__errno>
 8001fc8:	2309      	movs	r3, #9
 8001fca:	6003      	str	r3, [r0, #0]
 8001fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	b003      	add	sp, #12
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd6:	2e02      	cmp	r6, #2
 8001fd8:	d903      	bls.n	8001fe2 <_swilseek+0x2c>
 8001fda:	f000 fc81 	bl	80028e0 <__errno>
 8001fde:	2316      	movs	r3, #22
 8001fe0:	e7f3      	b.n	8001fca <_swilseek+0x14>
 8001fe2:	2e01      	cmp	r6, #1
 8001fe4:	d112      	bne.n	800200c <_swilseek+0x56>
 8001fe6:	6843      	ldr	r3, [r0, #4]
 8001fe8:	18e4      	adds	r4, r4, r3
 8001fea:	d4f6      	bmi.n	8001fda <_swilseek+0x24>
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	260a      	movs	r6, #10
 8001ff0:	466f      	mov	r7, sp
 8001ff2:	e9cd 3400 	strd	r3, r4, [sp]
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	4639      	mov	r1, r7
 8001ffa:	beab      	bkpt	0x00ab
 8001ffc:	4606      	mov	r6, r0
 8001ffe:	4630      	mov	r0, r6
 8002000:	f7ff ffaa 	bl	8001f58 <checkerror>
 8002004:	2800      	cmp	r0, #0
 8002006:	dbe1      	blt.n	8001fcc <_swilseek+0x16>
 8002008:	606c      	str	r4, [r5, #4]
 800200a:	e7e1      	b.n	8001fd0 <_swilseek+0x1a>
 800200c:	2e02      	cmp	r6, #2
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	d1ec      	bne.n	8001fec <_swilseek+0x36>
 8002012:	260c      	movs	r6, #12
 8002014:	466f      	mov	r7, sp
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4630      	mov	r0, r6
 800201a:	4639      	mov	r1, r7
 800201c:	beab      	bkpt	0x00ab
 800201e:	4606      	mov	r6, r0
 8002020:	4630      	mov	r0, r6
 8002022:	f7ff ff99 	bl	8001f58 <checkerror>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	d0d0      	beq.n	8001fcc <_swilseek+0x16>
 800202a:	4404      	add	r4, r0
 800202c:	e7de      	b.n	8001fec <_swilseek+0x36>

0800202e <_lseek>:
 800202e:	f7ff bfc2 	b.w	8001fb6 <_swilseek>

08002032 <_swiwrite>:
 8002032:	b530      	push	{r4, r5, lr}
 8002034:	b085      	sub	sp, #20
 8002036:	2405      	movs	r4, #5
 8002038:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800203c:	9203      	str	r2, [sp, #12]
 800203e:	ad01      	add	r5, sp, #4
 8002040:	4620      	mov	r0, r4
 8002042:	4629      	mov	r1, r5
 8002044:	beab      	bkpt	0x00ab
 8002046:	4604      	mov	r4, r0
 8002048:	4620      	mov	r0, r4
 800204a:	f7ff ff85 	bl	8001f58 <checkerror>
 800204e:	b005      	add	sp, #20
 8002050:	bd30      	pop	{r4, r5, pc}

08002052 <_write>:
 8002052:	b570      	push	{r4, r5, r6, lr}
 8002054:	460e      	mov	r6, r1
 8002056:	4615      	mov	r5, r2
 8002058:	f7ff ff56 	bl	8001f08 <findslot>
 800205c:	4604      	mov	r4, r0
 800205e:	b930      	cbnz	r0, 800206e <_write+0x1c>
 8002060:	f000 fc3e 	bl	80028e0 <__errno>
 8002064:	2309      	movs	r3, #9
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	462a      	mov	r2, r5
 8002070:	4631      	mov	r1, r6
 8002072:	6800      	ldr	r0, [r0, #0]
 8002074:	f7ff ffdd 	bl	8002032 <_swiwrite>
 8002078:	1e03      	subs	r3, r0, #0
 800207a:	dbf5      	blt.n	8002068 <_write+0x16>
 800207c:	6862      	ldr	r2, [r4, #4]
 800207e:	1ae8      	subs	r0, r5, r3
 8002080:	4402      	add	r2, r0
 8002082:	42ab      	cmp	r3, r5
 8002084:	6062      	str	r2, [r4, #4]
 8002086:	d1f1      	bne.n	800206c <_write+0x1a>
 8002088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff bf55 	b.w	8001f3c <error>

08002092 <_swiclose>:
 8002092:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002094:	2402      	movs	r4, #2
 8002096:	9001      	str	r0, [sp, #4]
 8002098:	ad01      	add	r5, sp, #4
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	beab      	bkpt	0x00ab
 80020a0:	4604      	mov	r4, r0
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff58 	bl	8001f58 <checkerror>
 80020a8:	b003      	add	sp, #12
 80020aa:	bd30      	pop	{r4, r5, pc}

080020ac <_close>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4605      	mov	r5, r0
 80020b0:	f7ff ff2a 	bl	8001f08 <findslot>
 80020b4:	4604      	mov	r4, r0
 80020b6:	b930      	cbnz	r0, 80020c6 <_close+0x1a>
 80020b8:	f000 fc12 	bl	80028e0 <__errno>
 80020bc:	2309      	movs	r3, #9
 80020be:	6003      	str	r3, [r0, #0]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	bd38      	pop	{r3, r4, r5, pc}
 80020c6:	3d01      	subs	r5, #1
 80020c8:	2d01      	cmp	r5, #1
 80020ca:	d809      	bhi.n	80020e0 <_close+0x34>
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_close+0x40>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d104      	bne.n	80020e0 <_close+0x34>
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	2000      	movs	r0, #0
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	e7f1      	b.n	80020c4 <_close+0x18>
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	f7ff ffd6 	bl	8002092 <_swiclose>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d0f5      	beq.n	80020d6 <_close+0x2a>
 80020ea:	e7eb      	b.n	80020c4 <_close+0x18>
 80020ec:	2000015c 	.word	0x2000015c

080020f0 <_swistat>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	460c      	mov	r4, r1
 80020f4:	f7ff ff08 	bl	8001f08 <findslot>
 80020f8:	4605      	mov	r5, r0
 80020fa:	b930      	cbnz	r0, 800210a <_swistat+0x1a>
 80020fc:	f000 fbf0 	bl	80028e0 <__errno>
 8002100:	2309      	movs	r3, #9
 8002102:	6003      	str	r3, [r0, #0]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	bd70      	pop	{r4, r5, r6, pc}
 800210a:	6863      	ldr	r3, [r4, #4]
 800210c:	260c      	movs	r6, #12
 800210e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002112:	6063      	str	r3, [r4, #4]
 8002114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002118:	64a3      	str	r3, [r4, #72]	@ 0x48
 800211a:	4630      	mov	r0, r6
 800211c:	4629      	mov	r1, r5
 800211e:	beab      	bkpt	0x00ab
 8002120:	4605      	mov	r5, r0
 8002122:	4628      	mov	r0, r5
 8002124:	f7ff ff18 	bl	8001f58 <checkerror>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d0eb      	beq.n	8002104 <_swistat+0x14>
 800212c:	6120      	str	r0, [r4, #16]
 800212e:	2000      	movs	r0, #0
 8002130:	e7ea      	b.n	8002108 <_swistat+0x18>

08002132 <_fstat>:
 8002132:	460b      	mov	r3, r1
 8002134:	b510      	push	{r4, lr}
 8002136:	2100      	movs	r1, #0
 8002138:	4604      	mov	r4, r0
 800213a:	2258      	movs	r2, #88	@ 0x58
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fb80 	bl	8002842 <memset>
 8002142:	4601      	mov	r1, r0
 8002144:	4620      	mov	r0, r4
 8002146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800214a:	f7ff bfd1 	b.w	80020f0 <_swistat>

0800214e <_stat>:
 800214e:	b538      	push	{r3, r4, r5, lr}
 8002150:	460d      	mov	r5, r1
 8002152:	4604      	mov	r4, r0
 8002154:	2258      	movs	r2, #88	@ 0x58
 8002156:	2100      	movs	r1, #0
 8002158:	4628      	mov	r0, r5
 800215a:	f000 fb72 	bl	8002842 <memset>
 800215e:	4620      	mov	r0, r4
 8002160:	2100      	movs	r1, #0
 8002162:	f000 f811 	bl	8002188 <_swiopen>
 8002166:	1c43      	adds	r3, r0, #1
 8002168:	4604      	mov	r4, r0
 800216a:	d00b      	beq.n	8002184 <_stat+0x36>
 800216c:	686b      	ldr	r3, [r5, #4]
 800216e:	4629      	mov	r1, r5
 8002170:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002174:	606b      	str	r3, [r5, #4]
 8002176:	f7ff ffbb 	bl	80020f0 <_swistat>
 800217a:	4605      	mov	r5, r0
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff ff95 	bl	80020ac <_close>
 8002182:	462c      	mov	r4, r5
 8002184:	4620      	mov	r0, r4
 8002186:	bd38      	pop	{r3, r4, r5, pc}

08002188 <_swiopen>:
 8002188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800218c:	4682      	mov	sl, r0
 800218e:	460e      	mov	r6, r1
 8002190:	2400      	movs	r4, #0
 8002192:	4f28      	ldr	r7, [pc, #160]	@ (8002234 <_swiopen+0xac>)
 8002194:	b096      	sub	sp, #88	@ 0x58
 8002196:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800219a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800219e:	3301      	adds	r3, #1
 80021a0:	d00c      	beq.n	80021bc <_swiopen+0x34>
 80021a2:	3401      	adds	r4, #1
 80021a4:	2c14      	cmp	r4, #20
 80021a6:	d1f6      	bne.n	8002196 <_swiopen+0xe>
 80021a8:	f000 fb9a 	bl	80028e0 <__errno>
 80021ac:	2318      	movs	r3, #24
 80021ae:	f04f 34ff 	mov.w	r4, #4294967295
 80021b2:	6003      	str	r3, [r0, #0]
 80021b4:	4620      	mov	r0, r4
 80021b6:	b016      	add	sp, #88	@ 0x58
 80021b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021bc:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80021c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80021c4:	46e9      	mov	r9, sp
 80021c6:	d109      	bne.n	80021dc <_swiopen+0x54>
 80021c8:	4649      	mov	r1, r9
 80021ca:	4650      	mov	r0, sl
 80021cc:	f7ff ffbf 	bl	800214e <_stat>
 80021d0:	3001      	adds	r0, #1
 80021d2:	d003      	beq.n	80021dc <_swiopen+0x54>
 80021d4:	f000 fb84 	bl	80028e0 <__errno>
 80021d8:	2311      	movs	r3, #17
 80021da:	e7e8      	b.n	80021ae <_swiopen+0x26>
 80021dc:	f240 6301 	movw	r3, #1537	@ 0x601
 80021e0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80021e4:	07b2      	lsls	r2, r6, #30
 80021e6:	bf48      	it	mi
 80021e8:	f045 0502 	orrmi.w	r5, r5, #2
 80021ec:	421e      	tst	r6, r3
 80021ee:	bf18      	it	ne
 80021f0:	f045 0504 	orrne.w	r5, r5, #4
 80021f4:	0733      	lsls	r3, r6, #28
 80021f6:	bf48      	it	mi
 80021f8:	f025 0504 	bicmi.w	r5, r5, #4
 80021fc:	4650      	mov	r0, sl
 80021fe:	bf48      	it	mi
 8002200:	f045 0508 	orrmi.w	r5, r5, #8
 8002204:	f8cd a000 	str.w	sl, [sp]
 8002208:	f7fd ffa0 	bl	800014c <strlen>
 800220c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002210:	2501      	movs	r5, #1
 8002212:	4628      	mov	r0, r5
 8002214:	4649      	mov	r1, r9
 8002216:	beab      	bkpt	0x00ab
 8002218:	4605      	mov	r5, r0
 800221a:	2d00      	cmp	r5, #0
 800221c:	db05      	blt.n	800222a <_swiopen+0xa2>
 800221e:	2300      	movs	r3, #0
 8002220:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002224:	4447      	add	r7, r8
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e7c4      	b.n	80021b4 <_swiopen+0x2c>
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff fe86 	bl	8001f3c <error>
 8002230:	4604      	mov	r4, r0
 8002232:	e7bf      	b.n	80021b4 <_swiopen+0x2c>
 8002234:	2000015c 	.word	0x2000015c

08002238 <_get_semihosting_exts>:
 8002238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800223c:	4606      	mov	r6, r0
 800223e:	460f      	mov	r7, r1
 8002240:	4829      	ldr	r0, [pc, #164]	@ (80022e8 <_get_semihosting_exts+0xb0>)
 8002242:	2100      	movs	r1, #0
 8002244:	4615      	mov	r5, r2
 8002246:	f7ff ff9f 	bl	8002188 <_swiopen>
 800224a:	4604      	mov	r4, r0
 800224c:	462a      	mov	r2, r5
 800224e:	2100      	movs	r1, #0
 8002250:	4630      	mov	r0, r6
 8002252:	f000 faf6 	bl	8002842 <memset>
 8002256:	1c63      	adds	r3, r4, #1
 8002258:	d014      	beq.n	8002284 <_get_semihosting_exts+0x4c>
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fe54 	bl	8001f08 <findslot>
 8002260:	f04f 080c 	mov.w	r8, #12
 8002264:	4681      	mov	r9, r0
 8002266:	4640      	mov	r0, r8
 8002268:	4649      	mov	r1, r9
 800226a:	beab      	bkpt	0x00ab
 800226c:	4680      	mov	r8, r0
 800226e:	4640      	mov	r0, r8
 8002270:	f7ff fe72 	bl	8001f58 <checkerror>
 8002274:	2803      	cmp	r0, #3
 8002276:	dd02      	ble.n	800227e <_get_semihosting_exts+0x46>
 8002278:	1ec3      	subs	r3, r0, #3
 800227a:	42ab      	cmp	r3, r5
 800227c:	dc07      	bgt.n	800228e <_get_semihosting_exts+0x56>
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ff14 	bl	80020ac <_close>
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	b003      	add	sp, #12
 800228a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800228e:	2204      	movs	r2, #4
 8002290:	4620      	mov	r0, r4
 8002292:	eb0d 0102 	add.w	r1, sp, r2
 8002296:	f7ff fe74 	bl	8001f82 <_read>
 800229a:	2803      	cmp	r0, #3
 800229c:	ddef      	ble.n	800227e <_get_semihosting_exts+0x46>
 800229e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022a2:	2b53      	cmp	r3, #83	@ 0x53
 80022a4:	d1eb      	bne.n	800227e <_get_semihosting_exts+0x46>
 80022a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022aa:	2b48      	cmp	r3, #72	@ 0x48
 80022ac:	d1e7      	bne.n	800227e <_get_semihosting_exts+0x46>
 80022ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022b2:	2b46      	cmp	r3, #70	@ 0x46
 80022b4:	d1e3      	bne.n	800227e <_get_semihosting_exts+0x46>
 80022b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022ba:	2b42      	cmp	r3, #66	@ 0x42
 80022bc:	d1df      	bne.n	800227e <_get_semihosting_exts+0x46>
 80022be:	2201      	movs	r2, #1
 80022c0:	4639      	mov	r1, r7
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff fe77 	bl	8001fb6 <_swilseek>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	dbd8      	blt.n	800227e <_get_semihosting_exts+0x46>
 80022cc:	462a      	mov	r2, r5
 80022ce:	4631      	mov	r1, r6
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fe56 	bl	8001f82 <_read>
 80022d6:	4605      	mov	r5, r0
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fee7 	bl	80020ac <_close>
 80022de:	4628      	mov	r0, r5
 80022e0:	f7ff fe3a 	bl	8001f58 <checkerror>
 80022e4:	e7d0      	b.n	8002288 <_get_semihosting_exts+0x50>
 80022e6:	bf00      	nop
 80022e8:	08003874 	.word	0x08003874

080022ec <initialise_semihosting_exts>:
 80022ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022ee:	2100      	movs	r1, #0
 80022f0:	2201      	movs	r2, #1
 80022f2:	4d09      	ldr	r5, [pc, #36]	@ (8002318 <initialise_semihosting_exts+0x2c>)
 80022f4:	4c09      	ldr	r4, [pc, #36]	@ (800231c <initialise_semihosting_exts+0x30>)
 80022f6:	a801      	add	r0, sp, #4
 80022f8:	6029      	str	r1, [r5, #0]
 80022fa:	6022      	str	r2, [r4, #0]
 80022fc:	f7ff ff9c 	bl	8002238 <_get_semihosting_exts>
 8002300:	2800      	cmp	r0, #0
 8002302:	dd07      	ble.n	8002314 <initialise_semihosting_exts+0x28>
 8002304:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002308:	f003 0201 	and.w	r2, r3, #1
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	602a      	str	r2, [r5, #0]
 8002312:	6023      	str	r3, [r4, #0]
 8002314:	b003      	add	sp, #12
 8002316:	bd30      	pop	{r4, r5, pc}
 8002318:	20000020 	.word	0x20000020
 800231c:	2000001c 	.word	0x2000001c

08002320 <_has_ext_stdout_stderr>:
 8002320:	b510      	push	{r4, lr}
 8002322:	4c04      	ldr	r4, [pc, #16]	@ (8002334 <_has_ext_stdout_stderr+0x14>)
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da01      	bge.n	800232e <_has_ext_stdout_stderr+0xe>
 800232a:	f7ff ffdf 	bl	80022ec <initialise_semihosting_exts>
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	2000001c 	.word	0x2000001c

08002338 <initialise_monitor_handles>:
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	2303      	movs	r3, #3
 800233e:	2400      	movs	r4, #0
 8002340:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80023e4 <initialise_monitor_handles+0xac>
 8002344:	b085      	sub	sp, #20
 8002346:	f8cd 9004 	str.w	r9, [sp, #4]
 800234a:	af01      	add	r7, sp, #4
 800234c:	9303      	str	r3, [sp, #12]
 800234e:	2501      	movs	r5, #1
 8002350:	9402      	str	r4, [sp, #8]
 8002352:	4628      	mov	r0, r5
 8002354:	4639      	mov	r1, r7
 8002356:	beab      	bkpt	0x00ab
 8002358:	4605      	mov	r5, r0
 800235a:	f04f 32ff 	mov.w	r2, #4294967295
 800235e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80023e8 <initialise_monitor_handles+0xb0>
 8002362:	4623      	mov	r3, r4
 8002364:	4c21      	ldr	r4, [pc, #132]	@ (80023ec <initialise_monitor_handles+0xb4>)
 8002366:	f8c8 5000 	str.w	r5, [r8]
 800236a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800236e:	3301      	adds	r3, #1
 8002370:	2b14      	cmp	r3, #20
 8002372:	d1fa      	bne.n	800236a <initialise_monitor_handles+0x32>
 8002374:	f7ff ffd4 	bl	8002320 <_has_ext_stdout_stderr>
 8002378:	4d1d      	ldr	r5, [pc, #116]	@ (80023f0 <initialise_monitor_handles+0xb8>)
 800237a:	b1d0      	cbz	r0, 80023b2 <initialise_monitor_handles+0x7a>
 800237c:	f04f 0a03 	mov.w	sl, #3
 8002380:	2304      	movs	r3, #4
 8002382:	f8cd 9004 	str.w	r9, [sp, #4]
 8002386:	2601      	movs	r6, #1
 8002388:	f8cd a00c 	str.w	sl, [sp, #12]
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	4630      	mov	r0, r6
 8002390:	4639      	mov	r1, r7
 8002392:	beab      	bkpt	0x00ab
 8002394:	4683      	mov	fp, r0
 8002396:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <initialise_monitor_handles+0xbc>)
 8002398:	f8cd 9004 	str.w	r9, [sp, #4]
 800239c:	f8c3 b000 	str.w	fp, [r3]
 80023a0:	2308      	movs	r3, #8
 80023a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	4630      	mov	r0, r6
 80023aa:	4639      	mov	r1, r7
 80023ac:	beab      	bkpt	0x00ab
 80023ae:	4606      	mov	r6, r0
 80023b0:	602e      	str	r6, [r5, #0]
 80023b2:	2600      	movs	r6, #0
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	6066      	str	r6, [r4, #4]
 80023b8:	3301      	adds	r3, #1
 80023ba:	bf02      	ittt	eq
 80023bc:	4b0d      	ldreq	r3, [pc, #52]	@ (80023f4 <initialise_monitor_handles+0xbc>)
 80023be:	681b      	ldreq	r3, [r3, #0]
 80023c0:	602b      	streq	r3, [r5, #0]
 80023c2:	f8d8 3000 	ldr.w	r3, [r8]
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	f7ff ffaa 	bl	8002320 <_has_ext_stdout_stderr>
 80023cc:	b130      	cbz	r0, 80023dc <initialise_monitor_handles+0xa4>
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <initialise_monitor_handles+0xbc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023d6:	682b      	ldr	r3, [r5, #0]
 80023d8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023dc:	b005      	add	sp, #20
 80023de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e2:	bf00      	nop
 80023e4:	0800388a 	.word	0x0800388a
 80023e8:	20000158 	.word	0x20000158
 80023ec:	2000015c 	.word	0x2000015c
 80023f0:	20000150 	.word	0x20000150
 80023f4:	20000154 	.word	0x20000154

080023f8 <_isatty>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	f7ff fd85 	bl	8001f08 <findslot>
 80023fe:	2409      	movs	r4, #9
 8002400:	4605      	mov	r5, r0
 8002402:	b920      	cbnz	r0, 800240e <_isatty+0x16>
 8002404:	f000 fa6c 	bl	80028e0 <__errno>
 8002408:	6004      	str	r4, [r0, #0]
 800240a:	2000      	movs	r0, #0
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	beab      	bkpt	0x00ab
 8002414:	4604      	mov	r4, r0
 8002416:	2c01      	cmp	r4, #1
 8002418:	4620      	mov	r0, r4
 800241a:	d0f7      	beq.n	800240c <_isatty+0x14>
 800241c:	f000 fa60 	bl	80028e0 <__errno>
 8002420:	2513      	movs	r5, #19
 8002422:	4604      	mov	r4, r0
 8002424:	2600      	movs	r6, #0
 8002426:	4628      	mov	r0, r5
 8002428:	4631      	mov	r1, r6
 800242a:	beab      	bkpt	0x00ab
 800242c:	4605      	mov	r5, r0
 800242e:	6025      	str	r5, [r4, #0]
 8002430:	e7eb      	b.n	800240a <_isatty+0x12>
	...

08002434 <__sflush_r>:
 8002434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	0716      	lsls	r6, r2, #28
 800243c:	4605      	mov	r5, r0
 800243e:	460c      	mov	r4, r1
 8002440:	d454      	bmi.n	80024ec <__sflush_r+0xb8>
 8002442:	684b      	ldr	r3, [r1, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	dc02      	bgt.n	800244e <__sflush_r+0x1a>
 8002448:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	dd48      	ble.n	80024e0 <__sflush_r+0xac>
 800244e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002450:	2e00      	cmp	r6, #0
 8002452:	d045      	beq.n	80024e0 <__sflush_r+0xac>
 8002454:	2300      	movs	r3, #0
 8002456:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800245a:	682f      	ldr	r7, [r5, #0]
 800245c:	6a21      	ldr	r1, [r4, #32]
 800245e:	602b      	str	r3, [r5, #0]
 8002460:	d030      	beq.n	80024c4 <__sflush_r+0x90>
 8002462:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	0759      	lsls	r1, r3, #29
 8002468:	d505      	bpl.n	8002476 <__sflush_r+0x42>
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002470:	b10b      	cbz	r3, 8002476 <__sflush_r+0x42>
 8002472:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	2300      	movs	r3, #0
 8002478:	4628      	mov	r0, r5
 800247a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800247c:	6a21      	ldr	r1, [r4, #32]
 800247e:	47b0      	blx	r6
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	d106      	bne.n	8002494 <__sflush_r+0x60>
 8002486:	6829      	ldr	r1, [r5, #0]
 8002488:	291d      	cmp	r1, #29
 800248a:	d82b      	bhi.n	80024e4 <__sflush_r+0xb0>
 800248c:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <__sflush_r+0xfc>)
 800248e:	410a      	asrs	r2, r1
 8002490:	07d6      	lsls	r6, r2, #31
 8002492:	d427      	bmi.n	80024e4 <__sflush_r+0xb0>
 8002494:	2200      	movs	r2, #0
 8002496:	6062      	str	r2, [r4, #4]
 8002498:	6922      	ldr	r2, [r4, #16]
 800249a:	04d9      	lsls	r1, r3, #19
 800249c:	6022      	str	r2, [r4, #0]
 800249e:	d504      	bpl.n	80024aa <__sflush_r+0x76>
 80024a0:	1c42      	adds	r2, r0, #1
 80024a2:	d101      	bne.n	80024a8 <__sflush_r+0x74>
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	b903      	cbnz	r3, 80024aa <__sflush_r+0x76>
 80024a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80024aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024ac:	602f      	str	r7, [r5, #0]
 80024ae:	b1b9      	cbz	r1, 80024e0 <__sflush_r+0xac>
 80024b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024b4:	4299      	cmp	r1, r3
 80024b6:	d002      	beq.n	80024be <__sflush_r+0x8a>
 80024b8:	4628      	mov	r0, r5
 80024ba:	f000 fa3f 	bl	800293c <_free_r>
 80024be:	2300      	movs	r3, #0
 80024c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80024c2:	e00d      	b.n	80024e0 <__sflush_r+0xac>
 80024c4:	2301      	movs	r3, #1
 80024c6:	4628      	mov	r0, r5
 80024c8:	47b0      	blx	r6
 80024ca:	4602      	mov	r2, r0
 80024cc:	1c50      	adds	r0, r2, #1
 80024ce:	d1c9      	bne.n	8002464 <__sflush_r+0x30>
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0c6      	beq.n	8002464 <__sflush_r+0x30>
 80024d6:	2b1d      	cmp	r3, #29
 80024d8:	d001      	beq.n	80024de <__sflush_r+0xaa>
 80024da:	2b16      	cmp	r3, #22
 80024dc:	d11d      	bne.n	800251a <__sflush_r+0xe6>
 80024de:	602f      	str	r7, [r5, #0]
 80024e0:	2000      	movs	r0, #0
 80024e2:	e021      	b.n	8002528 <__sflush_r+0xf4>
 80024e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	e01a      	b.n	8002522 <__sflush_r+0xee>
 80024ec:	690f      	ldr	r7, [r1, #16]
 80024ee:	2f00      	cmp	r7, #0
 80024f0:	d0f6      	beq.n	80024e0 <__sflush_r+0xac>
 80024f2:	0793      	lsls	r3, r2, #30
 80024f4:	bf18      	it	ne
 80024f6:	2300      	movne	r3, #0
 80024f8:	680e      	ldr	r6, [r1, #0]
 80024fa:	bf08      	it	eq
 80024fc:	694b      	ldreq	r3, [r1, #20]
 80024fe:	1bf6      	subs	r6, r6, r7
 8002500:	600f      	str	r7, [r1, #0]
 8002502:	608b      	str	r3, [r1, #8]
 8002504:	2e00      	cmp	r6, #0
 8002506:	ddeb      	ble.n	80024e0 <__sflush_r+0xac>
 8002508:	4633      	mov	r3, r6
 800250a:	463a      	mov	r2, r7
 800250c:	4628      	mov	r0, r5
 800250e:	6a21      	ldr	r1, [r4, #32]
 8002510:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002514:	47e0      	blx	ip
 8002516:	2800      	cmp	r0, #0
 8002518:	dc07      	bgt.n	800252a <__sflush_r+0xf6>
 800251a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002522:	f04f 30ff 	mov.w	r0, #4294967295
 8002526:	81a3      	strh	r3, [r4, #12]
 8002528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800252a:	4407      	add	r7, r0
 800252c:	1a36      	subs	r6, r6, r0
 800252e:	e7e9      	b.n	8002504 <__sflush_r+0xd0>
 8002530:	dfbffffe 	.word	0xdfbffffe

08002534 <_fflush_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	4605      	mov	r5, r0
 800253a:	460c      	mov	r4, r1
 800253c:	b913      	cbnz	r3, 8002544 <_fflush_r+0x10>
 800253e:	2500      	movs	r5, #0
 8002540:	4628      	mov	r0, r5
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	b118      	cbz	r0, 800254e <_fflush_r+0x1a>
 8002546:	6a03      	ldr	r3, [r0, #32]
 8002548:	b90b      	cbnz	r3, 800254e <_fflush_r+0x1a>
 800254a:	f000 f8bb 	bl	80026c4 <__sinit>
 800254e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f3      	beq.n	800253e <_fflush_r+0xa>
 8002556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002558:	07d0      	lsls	r0, r2, #31
 800255a:	d404      	bmi.n	8002566 <_fflush_r+0x32>
 800255c:	0599      	lsls	r1, r3, #22
 800255e:	d402      	bmi.n	8002566 <_fflush_r+0x32>
 8002560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002562:	f000 f9e8 	bl	8002936 <__retarget_lock_acquire_recursive>
 8002566:	4628      	mov	r0, r5
 8002568:	4621      	mov	r1, r4
 800256a:	f7ff ff63 	bl	8002434 <__sflush_r>
 800256e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002570:	4605      	mov	r5, r0
 8002572:	07da      	lsls	r2, r3, #31
 8002574:	d4e4      	bmi.n	8002540 <_fflush_r+0xc>
 8002576:	89a3      	ldrh	r3, [r4, #12]
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	d4e1      	bmi.n	8002540 <_fflush_r+0xc>
 800257c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800257e:	f000 f9db 	bl	8002938 <__retarget_lock_release_recursive>
 8002582:	e7dd      	b.n	8002540 <_fflush_r+0xc>

08002584 <fflush>:
 8002584:	4601      	mov	r1, r0
 8002586:	b920      	cbnz	r0, 8002592 <fflush+0xe>
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <fflush+0x18>)
 800258a:	4905      	ldr	r1, [pc, #20]	@ (80025a0 <fflush+0x1c>)
 800258c:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <fflush+0x20>)
 800258e:	f000 b8b1 	b.w	80026f4 <_fwalk_sglue>
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <fflush+0x24>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f7ff bfcd 	b.w	8002534 <_fflush_r>
 800259a:	bf00      	nop
 800259c:	20000024 	.word	0x20000024
 80025a0:	08002535 	.word	0x08002535
 80025a4:	20000034 	.word	0x20000034
 80025a8:	20000030 	.word	0x20000030

080025ac <std>:
 80025ac:	2300      	movs	r3, #0
 80025ae:	b510      	push	{r4, lr}
 80025b0:	4604      	mov	r4, r0
 80025b2:	e9c0 3300 	strd	r3, r3, [r0]
 80025b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ba:	6083      	str	r3, [r0, #8]
 80025bc:	8181      	strh	r1, [r0, #12]
 80025be:	6643      	str	r3, [r0, #100]	@ 0x64
 80025c0:	81c2      	strh	r2, [r0, #14]
 80025c2:	6183      	str	r3, [r0, #24]
 80025c4:	4619      	mov	r1, r3
 80025c6:	2208      	movs	r2, #8
 80025c8:	305c      	adds	r0, #92	@ 0x5c
 80025ca:	f000 f93a 	bl	8002842 <memset>
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <std+0x58>)
 80025d0:	6224      	str	r4, [r4, #32]
 80025d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <std+0x5c>)
 80025d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <std+0x60>)
 80025da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <std+0x64>)
 80025de:	6323      	str	r3, [r4, #48]	@ 0x30
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <std+0x68>)
 80025e2:	429c      	cmp	r4, r3
 80025e4:	d006      	beq.n	80025f4 <std+0x48>
 80025e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025ea:	4294      	cmp	r4, r2
 80025ec:	d002      	beq.n	80025f4 <std+0x48>
 80025ee:	33d0      	adds	r3, #208	@ 0xd0
 80025f0:	429c      	cmp	r4, r3
 80025f2:	d105      	bne.n	8002600 <std+0x54>
 80025f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025fc:	f000 b99a 	b.w	8002934 <__retarget_lock_init_recursive>
 8002600:	bd10      	pop	{r4, pc}
 8002602:	bf00      	nop
 8002604:	080027bd 	.word	0x080027bd
 8002608:	080027df 	.word	0x080027df
 800260c:	08002817 	.word	0x08002817
 8002610:	0800283b 	.word	0x0800283b
 8002614:	200001fc 	.word	0x200001fc

08002618 <stdio_exit_handler>:
 8002618:	4a02      	ldr	r2, [pc, #8]	@ (8002624 <stdio_exit_handler+0xc>)
 800261a:	4903      	ldr	r1, [pc, #12]	@ (8002628 <stdio_exit_handler+0x10>)
 800261c:	4803      	ldr	r0, [pc, #12]	@ (800262c <stdio_exit_handler+0x14>)
 800261e:	f000 b869 	b.w	80026f4 <_fwalk_sglue>
 8002622:	bf00      	nop
 8002624:	20000024 	.word	0x20000024
 8002628:	08002535 	.word	0x08002535
 800262c:	20000034 	.word	0x20000034

08002630 <cleanup_stdio>:
 8002630:	6841      	ldr	r1, [r0, #4]
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <cleanup_stdio+0x34>)
 8002634:	b510      	push	{r4, lr}
 8002636:	4299      	cmp	r1, r3
 8002638:	4604      	mov	r4, r0
 800263a:	d001      	beq.n	8002640 <cleanup_stdio+0x10>
 800263c:	f7ff ff7a 	bl	8002534 <_fflush_r>
 8002640:	68a1      	ldr	r1, [r4, #8]
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <cleanup_stdio+0x38>)
 8002644:	4299      	cmp	r1, r3
 8002646:	d002      	beq.n	800264e <cleanup_stdio+0x1e>
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff ff73 	bl	8002534 <_fflush_r>
 800264e:	68e1      	ldr	r1, [r4, #12]
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <cleanup_stdio+0x3c>)
 8002652:	4299      	cmp	r1, r3
 8002654:	d004      	beq.n	8002660 <cleanup_stdio+0x30>
 8002656:	4620      	mov	r0, r4
 8002658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265c:	f7ff bf6a 	b.w	8002534 <_fflush_r>
 8002660:	bd10      	pop	{r4, pc}
 8002662:	bf00      	nop
 8002664:	200001fc 	.word	0x200001fc
 8002668:	20000264 	.word	0x20000264
 800266c:	200002cc 	.word	0x200002cc

08002670 <global_stdio_init.part.0>:
 8002670:	b510      	push	{r4, lr}
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <global_stdio_init.part.0+0x30>)
 8002674:	4c0b      	ldr	r4, [pc, #44]	@ (80026a4 <global_stdio_init.part.0+0x34>)
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <global_stdio_init.part.0+0x38>)
 8002678:	4620      	mov	r0, r4
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	2104      	movs	r1, #4
 800267e:	2200      	movs	r2, #0
 8002680:	f7ff ff94 	bl	80025ac <std>
 8002684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002688:	2201      	movs	r2, #1
 800268a:	2109      	movs	r1, #9
 800268c:	f7ff ff8e 	bl	80025ac <std>
 8002690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002694:	2202      	movs	r2, #2
 8002696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800269a:	2112      	movs	r1, #18
 800269c:	f7ff bf86 	b.w	80025ac <std>
 80026a0:	20000334 	.word	0x20000334
 80026a4:	200001fc 	.word	0x200001fc
 80026a8:	08002619 	.word	0x08002619

080026ac <__sfp_lock_acquire>:
 80026ac:	4801      	ldr	r0, [pc, #4]	@ (80026b4 <__sfp_lock_acquire+0x8>)
 80026ae:	f000 b942 	b.w	8002936 <__retarget_lock_acquire_recursive>
 80026b2:	bf00      	nop
 80026b4:	2000033d 	.word	0x2000033d

080026b8 <__sfp_lock_release>:
 80026b8:	4801      	ldr	r0, [pc, #4]	@ (80026c0 <__sfp_lock_release+0x8>)
 80026ba:	f000 b93d 	b.w	8002938 <__retarget_lock_release_recursive>
 80026be:	bf00      	nop
 80026c0:	2000033d 	.word	0x2000033d

080026c4 <__sinit>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	4604      	mov	r4, r0
 80026c8:	f7ff fff0 	bl	80026ac <__sfp_lock_acquire>
 80026cc:	6a23      	ldr	r3, [r4, #32]
 80026ce:	b11b      	cbz	r3, 80026d8 <__sinit+0x14>
 80026d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d4:	f7ff bff0 	b.w	80026b8 <__sfp_lock_release>
 80026d8:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <__sinit+0x28>)
 80026da:	6223      	str	r3, [r4, #32]
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <__sinit+0x2c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f5      	bne.n	80026d0 <__sinit+0xc>
 80026e4:	f7ff ffc4 	bl	8002670 <global_stdio_init.part.0>
 80026e8:	e7f2      	b.n	80026d0 <__sinit+0xc>
 80026ea:	bf00      	nop
 80026ec:	08002631 	.word	0x08002631
 80026f0:	20000334 	.word	0x20000334

080026f4 <_fwalk_sglue>:
 80026f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f8:	4607      	mov	r7, r0
 80026fa:	4688      	mov	r8, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	2600      	movs	r6, #0
 8002700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002704:	f1b9 0901 	subs.w	r9, r9, #1
 8002708:	d505      	bpl.n	8002716 <_fwalk_sglue+0x22>
 800270a:	6824      	ldr	r4, [r4, #0]
 800270c:	2c00      	cmp	r4, #0
 800270e:	d1f7      	bne.n	8002700 <_fwalk_sglue+0xc>
 8002710:	4630      	mov	r0, r6
 8002712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002716:	89ab      	ldrh	r3, [r5, #12]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d907      	bls.n	800272c <_fwalk_sglue+0x38>
 800271c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002720:	3301      	adds	r3, #1
 8002722:	d003      	beq.n	800272c <_fwalk_sglue+0x38>
 8002724:	4629      	mov	r1, r5
 8002726:	4638      	mov	r0, r7
 8002728:	47c0      	blx	r8
 800272a:	4306      	orrs	r6, r0
 800272c:	3568      	adds	r5, #104	@ 0x68
 800272e:	e7e9      	b.n	8002704 <_fwalk_sglue+0x10>

08002730 <iprintf>:
 8002730:	b40f      	push	{r0, r1, r2, r3}
 8002732:	b507      	push	{r0, r1, r2, lr}
 8002734:	4906      	ldr	r1, [pc, #24]	@ (8002750 <iprintf+0x20>)
 8002736:	ab04      	add	r3, sp, #16
 8002738:	6808      	ldr	r0, [r1, #0]
 800273a:	f853 2b04 	ldr.w	r2, [r3], #4
 800273e:	6881      	ldr	r1, [r0, #8]
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	f000 fb71 	bl	8002e28 <_vfiprintf_r>
 8002746:	b003      	add	sp, #12
 8002748:	f85d eb04 	ldr.w	lr, [sp], #4
 800274c:	b004      	add	sp, #16
 800274e:	4770      	bx	lr
 8002750:	20000030 	.word	0x20000030

08002754 <sniprintf>:
 8002754:	b40c      	push	{r2, r3}
 8002756:	b530      	push	{r4, r5, lr}
 8002758:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <sniprintf+0x64>)
 800275a:	1e0c      	subs	r4, r1, #0
 800275c:	681d      	ldr	r5, [r3, #0]
 800275e:	b09d      	sub	sp, #116	@ 0x74
 8002760:	da08      	bge.n	8002774 <sniprintf+0x20>
 8002762:	238b      	movs	r3, #139	@ 0x8b
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	b01d      	add	sp, #116	@ 0x74
 800276c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002770:	b002      	add	sp, #8
 8002772:	4770      	bx	lr
 8002774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002778:	f8ad 3014 	strh.w	r3, [sp, #20]
 800277c:	bf0c      	ite	eq
 800277e:	4623      	moveq	r3, r4
 8002780:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002784:	9304      	str	r3, [sp, #16]
 8002786:	9307      	str	r3, [sp, #28]
 8002788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800278c:	9002      	str	r0, [sp, #8]
 800278e:	9006      	str	r0, [sp, #24]
 8002790:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002794:	4628      	mov	r0, r5
 8002796:	ab21      	add	r3, sp, #132	@ 0x84
 8002798:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800279a:	a902      	add	r1, sp, #8
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	f000 fa1f 	bl	8002be0 <_svfiprintf_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	bfbc      	itt	lt
 80027a6:	238b      	movlt	r3, #139	@ 0x8b
 80027a8:	602b      	strlt	r3, [r5, #0]
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	d0dd      	beq.n	800276a <sniprintf+0x16>
 80027ae:	2200      	movs	r2, #0
 80027b0:	9b02      	ldr	r3, [sp, #8]
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e7d9      	b.n	800276a <sniprintf+0x16>
 80027b6:	bf00      	nop
 80027b8:	20000030 	.word	0x20000030

080027bc <__sread>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	460c      	mov	r4, r1
 80027c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c4:	f000 f868 	bl	8002898 <_read_r>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	bfab      	itete	ge
 80027cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027ce:	89a3      	ldrhlt	r3, [r4, #12]
 80027d0:	181b      	addge	r3, r3, r0
 80027d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027d6:	bfac      	ite	ge
 80027d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027da:	81a3      	strhlt	r3, [r4, #12]
 80027dc:	bd10      	pop	{r4, pc}

080027de <__swrite>:
 80027de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e2:	461f      	mov	r7, r3
 80027e4:	898b      	ldrh	r3, [r1, #12]
 80027e6:	4605      	mov	r5, r0
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	460c      	mov	r4, r1
 80027ec:	4616      	mov	r6, r2
 80027ee:	d505      	bpl.n	80027fc <__swrite+0x1e>
 80027f0:	2302      	movs	r3, #2
 80027f2:	2200      	movs	r2, #0
 80027f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f8:	f000 f83c 	bl	8002874 <_lseek_r>
 80027fc:	89a3      	ldrh	r3, [r4, #12]
 80027fe:	4632      	mov	r2, r6
 8002800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	4628      	mov	r0, r5
 8002808:	463b      	mov	r3, r7
 800280a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800280e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002812:	f000 b853 	b.w	80028bc <_write_r>

08002816 <__sseek>:
 8002816:	b510      	push	{r4, lr}
 8002818:	460c      	mov	r4, r1
 800281a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281e:	f000 f829 	bl	8002874 <_lseek_r>
 8002822:	1c43      	adds	r3, r0, #1
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	bf15      	itete	ne
 8002828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800282a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800282e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002832:	81a3      	strheq	r3, [r4, #12]
 8002834:	bf18      	it	ne
 8002836:	81a3      	strhne	r3, [r4, #12]
 8002838:	bd10      	pop	{r4, pc}

0800283a <__sclose>:
 800283a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283e:	f000 b809 	b.w	8002854 <_close_r>

08002842 <memset>:
 8002842:	4603      	mov	r3, r0
 8002844:	4402      	add	r2, r0
 8002846:	4293      	cmp	r3, r2
 8002848:	d100      	bne.n	800284c <memset+0xa>
 800284a:	4770      	bx	lr
 800284c:	f803 1b01 	strb.w	r1, [r3], #1
 8002850:	e7f9      	b.n	8002846 <memset+0x4>
	...

08002854 <_close_r>:
 8002854:	b538      	push	{r3, r4, r5, lr}
 8002856:	2300      	movs	r3, #0
 8002858:	4d05      	ldr	r5, [pc, #20]	@ (8002870 <_close_r+0x1c>)
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	602b      	str	r3, [r5, #0]
 8002860:	f7ff fc24 	bl	80020ac <_close>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d102      	bne.n	800286e <_close_r+0x1a>
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	b103      	cbz	r3, 800286e <_close_r+0x1a>
 800286c:	6023      	str	r3, [r4, #0]
 800286e:	bd38      	pop	{r3, r4, r5, pc}
 8002870:	20000338 	.word	0x20000338

08002874 <_lseek_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	2200      	movs	r2, #0
 800287e:	4d05      	ldr	r5, [pc, #20]	@ (8002894 <_lseek_r+0x20>)
 8002880:	602a      	str	r2, [r5, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	f7ff fbd3 	bl	800202e <_lseek>
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	d102      	bne.n	8002892 <_lseek_r+0x1e>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	b103      	cbz	r3, 8002892 <_lseek_r+0x1e>
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	bd38      	pop	{r3, r4, r5, pc}
 8002894:	20000338 	.word	0x20000338

08002898 <_read_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	2200      	movs	r2, #0
 80028a2:	4d05      	ldr	r5, [pc, #20]	@ (80028b8 <_read_r+0x20>)
 80028a4:	602a      	str	r2, [r5, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f7ff fb6b 	bl	8001f82 <_read>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_read_r+0x1e>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_read_r+0x1e>
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	20000338 	.word	0x20000338

080028bc <_write_r>:
 80028bc:	b538      	push	{r3, r4, r5, lr}
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	2200      	movs	r2, #0
 80028c6:	4d05      	ldr	r5, [pc, #20]	@ (80028dc <_write_r+0x20>)
 80028c8:	602a      	str	r2, [r5, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f7ff fbc1 	bl	8002052 <_write>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d102      	bne.n	80028da <_write_r+0x1e>
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	b103      	cbz	r3, 80028da <_write_r+0x1e>
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	bd38      	pop	{r3, r4, r5, pc}
 80028dc:	20000338 	.word	0x20000338

080028e0 <__errno>:
 80028e0:	4b01      	ldr	r3, [pc, #4]	@ (80028e8 <__errno+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000030 	.word	0x20000030

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4d0c      	ldr	r5, [pc, #48]	@ (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	@ (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	f000 fed2 	bl	80036a4 <_init>
 8002900:	2600      	movs	r6, #0
 8002902:	4d0a      	ldr	r5, [pc, #40]	@ (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	@ (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f855 3b04 	ldr.w	r3, [r5], #4
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f855 3b04 	ldr.w	r3, [r5], #4
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	080038cc 	.word	0x080038cc
 8002928:	080038cc 	.word	0x080038cc
 800292c:	080038cc 	.word	0x080038cc
 8002930:	080038d0 	.word	0x080038d0

08002934 <__retarget_lock_init_recursive>:
 8002934:	4770      	bx	lr

08002936 <__retarget_lock_acquire_recursive>:
 8002936:	4770      	bx	lr

08002938 <__retarget_lock_release_recursive>:
 8002938:	4770      	bx	lr
	...

0800293c <_free_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4605      	mov	r5, r0
 8002940:	2900      	cmp	r1, #0
 8002942:	d040      	beq.n	80029c6 <_free_r+0x8a>
 8002944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002948:	1f0c      	subs	r4, r1, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	bfb8      	it	lt
 800294e:	18e4      	addlt	r4, r4, r3
 8002950:	f000 f8de 	bl	8002b10 <__malloc_lock>
 8002954:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <_free_r+0x8c>)
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	b933      	cbnz	r3, 8002968 <_free_r+0x2c>
 800295a:	6063      	str	r3, [r4, #4]
 800295c:	6014      	str	r4, [r2, #0]
 800295e:	4628      	mov	r0, r5
 8002960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002964:	f000 b8da 	b.w	8002b1c <__malloc_unlock>
 8002968:	42a3      	cmp	r3, r4
 800296a:	d908      	bls.n	800297e <_free_r+0x42>
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	1821      	adds	r1, r4, r0
 8002970:	428b      	cmp	r3, r1
 8002972:	bf01      	itttt	eq
 8002974:	6819      	ldreq	r1, [r3, #0]
 8002976:	685b      	ldreq	r3, [r3, #4]
 8002978:	1809      	addeq	r1, r1, r0
 800297a:	6021      	streq	r1, [r4, #0]
 800297c:	e7ed      	b.n	800295a <_free_r+0x1e>
 800297e:	461a      	mov	r2, r3
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b10b      	cbz	r3, 8002988 <_free_r+0x4c>
 8002984:	42a3      	cmp	r3, r4
 8002986:	d9fa      	bls.n	800297e <_free_r+0x42>
 8002988:	6811      	ldr	r1, [r2, #0]
 800298a:	1850      	adds	r0, r2, r1
 800298c:	42a0      	cmp	r0, r4
 800298e:	d10b      	bne.n	80029a8 <_free_r+0x6c>
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	4401      	add	r1, r0
 8002994:	1850      	adds	r0, r2, r1
 8002996:	4283      	cmp	r3, r0
 8002998:	6011      	str	r1, [r2, #0]
 800299a:	d1e0      	bne.n	800295e <_free_r+0x22>
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4408      	add	r0, r1
 80029a2:	6010      	str	r0, [r2, #0]
 80029a4:	6053      	str	r3, [r2, #4]
 80029a6:	e7da      	b.n	800295e <_free_r+0x22>
 80029a8:	d902      	bls.n	80029b0 <_free_r+0x74>
 80029aa:	230c      	movs	r3, #12
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	e7d6      	b.n	800295e <_free_r+0x22>
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	1821      	adds	r1, r4, r0
 80029b4:	428b      	cmp	r3, r1
 80029b6:	bf01      	itttt	eq
 80029b8:	6819      	ldreq	r1, [r3, #0]
 80029ba:	685b      	ldreq	r3, [r3, #4]
 80029bc:	1809      	addeq	r1, r1, r0
 80029be:	6021      	streq	r1, [r4, #0]
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	6054      	str	r4, [r2, #4]
 80029c4:	e7cb      	b.n	800295e <_free_r+0x22>
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000344 	.word	0x20000344

080029cc <sbrk_aligned>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4e0f      	ldr	r6, [pc, #60]	@ (8002a0c <sbrk_aligned+0x40>)
 80029d0:	460c      	mov	r4, r1
 80029d2:	6831      	ldr	r1, [r6, #0]
 80029d4:	4605      	mov	r5, r0
 80029d6:	b911      	cbnz	r1, 80029de <sbrk_aligned+0x12>
 80029d8:	f000 fd7e 	bl	80034d8 <_sbrk_r>
 80029dc:	6030      	str	r0, [r6, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	4628      	mov	r0, r5
 80029e2:	f000 fd79 	bl	80034d8 <_sbrk_r>
 80029e6:	1c43      	adds	r3, r0, #1
 80029e8:	d103      	bne.n	80029f2 <sbrk_aligned+0x26>
 80029ea:	f04f 34ff 	mov.w	r4, #4294967295
 80029ee:	4620      	mov	r0, r4
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	1cc4      	adds	r4, r0, #3
 80029f4:	f024 0403 	bic.w	r4, r4, #3
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d0f8      	beq.n	80029ee <sbrk_aligned+0x22>
 80029fc:	1a21      	subs	r1, r4, r0
 80029fe:	4628      	mov	r0, r5
 8002a00:	f000 fd6a 	bl	80034d8 <_sbrk_r>
 8002a04:	3001      	adds	r0, #1
 8002a06:	d1f2      	bne.n	80029ee <sbrk_aligned+0x22>
 8002a08:	e7ef      	b.n	80029ea <sbrk_aligned+0x1e>
 8002a0a:	bf00      	nop
 8002a0c:	20000340 	.word	0x20000340

08002a10 <_malloc_r>:
 8002a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a14:	1ccd      	adds	r5, r1, #3
 8002a16:	f025 0503 	bic.w	r5, r5, #3
 8002a1a:	3508      	adds	r5, #8
 8002a1c:	2d0c      	cmp	r5, #12
 8002a1e:	bf38      	it	cc
 8002a20:	250c      	movcc	r5, #12
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	4606      	mov	r6, r0
 8002a26:	db01      	blt.n	8002a2c <_malloc_r+0x1c>
 8002a28:	42a9      	cmp	r1, r5
 8002a2a:	d904      	bls.n	8002a36 <_malloc_r+0x26>
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	6033      	str	r3, [r6, #0]
 8002a30:	2000      	movs	r0, #0
 8002a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b0c <_malloc_r+0xfc>
 8002a3a:	f000 f869 	bl	8002b10 <__malloc_lock>
 8002a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a42:	461c      	mov	r4, r3
 8002a44:	bb44      	cbnz	r4, 8002a98 <_malloc_r+0x88>
 8002a46:	4629      	mov	r1, r5
 8002a48:	4630      	mov	r0, r6
 8002a4a:	f7ff ffbf 	bl	80029cc <sbrk_aligned>
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	4604      	mov	r4, r0
 8002a52:	d158      	bne.n	8002b06 <_malloc_r+0xf6>
 8002a54:	f8d8 4000 	ldr.w	r4, [r8]
 8002a58:	4627      	mov	r7, r4
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d143      	bne.n	8002ae6 <_malloc_r+0xd6>
 8002a5e:	2c00      	cmp	r4, #0
 8002a60:	d04b      	beq.n	8002afa <_malloc_r+0xea>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	4639      	mov	r1, r7
 8002a66:	4630      	mov	r0, r6
 8002a68:	eb04 0903 	add.w	r9, r4, r3
 8002a6c:	f000 fd34 	bl	80034d8 <_sbrk_r>
 8002a70:	4581      	cmp	r9, r0
 8002a72:	d142      	bne.n	8002afa <_malloc_r+0xea>
 8002a74:	6821      	ldr	r1, [r4, #0]
 8002a76:	4630      	mov	r0, r6
 8002a78:	1a6d      	subs	r5, r5, r1
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f7ff ffa6 	bl	80029cc <sbrk_aligned>
 8002a80:	3001      	adds	r0, #1
 8002a82:	d03a      	beq.n	8002afa <_malloc_r+0xea>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	442b      	add	r3, r5
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	bb62      	cbnz	r2, 8002aec <_malloc_r+0xdc>
 8002a92:	f8c8 7000 	str.w	r7, [r8]
 8002a96:	e00f      	b.n	8002ab8 <_malloc_r+0xa8>
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	1b52      	subs	r2, r2, r5
 8002a9c:	d420      	bmi.n	8002ae0 <_malloc_r+0xd0>
 8002a9e:	2a0b      	cmp	r2, #11
 8002aa0:	d917      	bls.n	8002ad2 <_malloc_r+0xc2>
 8002aa2:	1961      	adds	r1, r4, r5
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	6025      	str	r5, [r4, #0]
 8002aa8:	bf18      	it	ne
 8002aaa:	6059      	strne	r1, [r3, #4]
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	bf08      	it	eq
 8002ab0:	f8c8 1000 	streq.w	r1, [r8]
 8002ab4:	5162      	str	r2, [r4, r5]
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	4630      	mov	r0, r6
 8002aba:	f000 f82f 	bl	8002b1c <__malloc_unlock>
 8002abe:	f104 000b 	add.w	r0, r4, #11
 8002ac2:	1d23      	adds	r3, r4, #4
 8002ac4:	f020 0007 	bic.w	r0, r0, #7
 8002ac8:	1ac2      	subs	r2, r0, r3
 8002aca:	bf1c      	itt	ne
 8002acc:	1a1b      	subne	r3, r3, r0
 8002ace:	50a3      	strne	r3, [r4, r2]
 8002ad0:	e7af      	b.n	8002a32 <_malloc_r+0x22>
 8002ad2:	6862      	ldr	r2, [r4, #4]
 8002ad4:	42a3      	cmp	r3, r4
 8002ad6:	bf0c      	ite	eq
 8002ad8:	f8c8 2000 	streq.w	r2, [r8]
 8002adc:	605a      	strne	r2, [r3, #4]
 8002ade:	e7eb      	b.n	8002ab8 <_malloc_r+0xa8>
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	6864      	ldr	r4, [r4, #4]
 8002ae4:	e7ae      	b.n	8002a44 <_malloc_r+0x34>
 8002ae6:	463c      	mov	r4, r7
 8002ae8:	687f      	ldr	r7, [r7, #4]
 8002aea:	e7b6      	b.n	8002a5a <_malloc_r+0x4a>
 8002aec:	461a      	mov	r2, r3
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	42a3      	cmp	r3, r4
 8002af2:	d1fb      	bne.n	8002aec <_malloc_r+0xdc>
 8002af4:	2300      	movs	r3, #0
 8002af6:	6053      	str	r3, [r2, #4]
 8002af8:	e7de      	b.n	8002ab8 <_malloc_r+0xa8>
 8002afa:	230c      	movs	r3, #12
 8002afc:	4630      	mov	r0, r6
 8002afe:	6033      	str	r3, [r6, #0]
 8002b00:	f000 f80c 	bl	8002b1c <__malloc_unlock>
 8002b04:	e794      	b.n	8002a30 <_malloc_r+0x20>
 8002b06:	6005      	str	r5, [r0, #0]
 8002b08:	e7d6      	b.n	8002ab8 <_malloc_r+0xa8>
 8002b0a:	bf00      	nop
 8002b0c:	20000344 	.word	0x20000344

08002b10 <__malloc_lock>:
 8002b10:	4801      	ldr	r0, [pc, #4]	@ (8002b18 <__malloc_lock+0x8>)
 8002b12:	f7ff bf10 	b.w	8002936 <__retarget_lock_acquire_recursive>
 8002b16:	bf00      	nop
 8002b18:	2000033c 	.word	0x2000033c

08002b1c <__malloc_unlock>:
 8002b1c:	4801      	ldr	r0, [pc, #4]	@ (8002b24 <__malloc_unlock+0x8>)
 8002b1e:	f7ff bf0b 	b.w	8002938 <__retarget_lock_release_recursive>
 8002b22:	bf00      	nop
 8002b24:	2000033c 	.word	0x2000033c

08002b28 <__ssputs_r>:
 8002b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2c:	461f      	mov	r7, r3
 8002b2e:	688e      	ldr	r6, [r1, #8]
 8002b30:	4682      	mov	sl, r0
 8002b32:	42be      	cmp	r6, r7
 8002b34:	460c      	mov	r4, r1
 8002b36:	4690      	mov	r8, r2
 8002b38:	680b      	ldr	r3, [r1, #0]
 8002b3a:	d82d      	bhi.n	8002b98 <__ssputs_r+0x70>
 8002b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b44:	d026      	beq.n	8002b94 <__ssputs_r+0x6c>
 8002b46:	6965      	ldr	r5, [r4, #20]
 8002b48:	6909      	ldr	r1, [r1, #16]
 8002b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b4e:	eba3 0901 	sub.w	r9, r3, r1
 8002b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b56:	1c7b      	adds	r3, r7, #1
 8002b58:	444b      	add	r3, r9
 8002b5a:	106d      	asrs	r5, r5, #1
 8002b5c:	429d      	cmp	r5, r3
 8002b5e:	bf38      	it	cc
 8002b60:	461d      	movcc	r5, r3
 8002b62:	0553      	lsls	r3, r2, #21
 8002b64:	d527      	bpl.n	8002bb6 <__ssputs_r+0x8e>
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7ff ff52 	bl	8002a10 <_malloc_r>
 8002b6c:	4606      	mov	r6, r0
 8002b6e:	b360      	cbz	r0, 8002bca <__ssputs_r+0xa2>
 8002b70:	464a      	mov	r2, r9
 8002b72:	6921      	ldr	r1, [r4, #16]
 8002b74:	f000 fcce 	bl	8003514 <memcpy>
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b82:	81a3      	strh	r3, [r4, #12]
 8002b84:	6126      	str	r6, [r4, #16]
 8002b86:	444e      	add	r6, r9
 8002b88:	6026      	str	r6, [r4, #0]
 8002b8a:	463e      	mov	r6, r7
 8002b8c:	6165      	str	r5, [r4, #20]
 8002b8e:	eba5 0509 	sub.w	r5, r5, r9
 8002b92:	60a5      	str	r5, [r4, #8]
 8002b94:	42be      	cmp	r6, r7
 8002b96:	d900      	bls.n	8002b9a <__ssputs_r+0x72>
 8002b98:	463e      	mov	r6, r7
 8002b9a:	4632      	mov	r2, r6
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	f000 fc80 	bl	80034a4 <memmove>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	68a3      	ldr	r3, [r4, #8]
 8002ba8:	1b9b      	subs	r3, r3, r6
 8002baa:	60a3      	str	r3, [r4, #8]
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	4433      	add	r3, r6
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	f000 fcba 	bl	8003530 <_realloc_r>
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d1e0      	bne.n	8002b84 <__ssputs_r+0x5c>
 8002bc2:	4650      	mov	r0, sl
 8002bc4:	6921      	ldr	r1, [r4, #16]
 8002bc6:	f7ff feb9 	bl	800293c <_free_r>
 8002bca:	230c      	movs	r3, #12
 8002bcc:	f8ca 3000 	str.w	r3, [sl]
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	e7e9      	b.n	8002bb2 <__ssputs_r+0x8a>
	...

08002be0 <_svfiprintf_r>:
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	4698      	mov	r8, r3
 8002be6:	898b      	ldrh	r3, [r1, #12]
 8002be8:	4607      	mov	r7, r0
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	460d      	mov	r5, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	b09d      	sub	sp, #116	@ 0x74
 8002bf2:	d510      	bpl.n	8002c16 <_svfiprintf_r+0x36>
 8002bf4:	690b      	ldr	r3, [r1, #16]
 8002bf6:	b973      	cbnz	r3, 8002c16 <_svfiprintf_r+0x36>
 8002bf8:	2140      	movs	r1, #64	@ 0x40
 8002bfa:	f7ff ff09 	bl	8002a10 <_malloc_r>
 8002bfe:	6028      	str	r0, [r5, #0]
 8002c00:	6128      	str	r0, [r5, #16]
 8002c02:	b930      	cbnz	r0, 8002c12 <_svfiprintf_r+0x32>
 8002c04:	230c      	movs	r3, #12
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	b01d      	add	sp, #116	@ 0x74
 8002c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c12:	2340      	movs	r3, #64	@ 0x40
 8002c14:	616b      	str	r3, [r5, #20]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c20:	2330      	movs	r3, #48	@ 0x30
 8002c22:	f04f 0901 	mov.w	r9, #1
 8002c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002dc4 <_svfiprintf_r+0x1e4>
 8002c2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c32:	4623      	mov	r3, r4
 8002c34:	469a      	mov	sl, r3
 8002c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c3a:	b10a      	cbz	r2, 8002c40 <_svfiprintf_r+0x60>
 8002c3c:	2a25      	cmp	r2, #37	@ 0x25
 8002c3e:	d1f9      	bne.n	8002c34 <_svfiprintf_r+0x54>
 8002c40:	ebba 0b04 	subs.w	fp, sl, r4
 8002c44:	d00b      	beq.n	8002c5e <_svfiprintf_r+0x7e>
 8002c46:	465b      	mov	r3, fp
 8002c48:	4622      	mov	r2, r4
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	f7ff ff6b 	bl	8002b28 <__ssputs_r>
 8002c52:	3001      	adds	r0, #1
 8002c54:	f000 80a7 	beq.w	8002da6 <_svfiprintf_r+0x1c6>
 8002c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c5a:	445a      	add	r2, fp
 8002c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 809f 	beq.w	8002da6 <_svfiprintf_r+0x1c6>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c72:	f10a 0a01 	add.w	sl, sl, #1
 8002c76:	9304      	str	r3, [sp, #16]
 8002c78:	9307      	str	r3, [sp, #28]
 8002c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c80:	4654      	mov	r4, sl
 8002c82:	2205      	movs	r2, #5
 8002c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c88:	484e      	ldr	r0, [pc, #312]	@ (8002dc4 <_svfiprintf_r+0x1e4>)
 8002c8a:	f000 fc35 	bl	80034f8 <memchr>
 8002c8e:	9a04      	ldr	r2, [sp, #16]
 8002c90:	b9d8      	cbnz	r0, 8002cca <_svfiprintf_r+0xea>
 8002c92:	06d0      	lsls	r0, r2, #27
 8002c94:	bf44      	itt	mi
 8002c96:	2320      	movmi	r3, #32
 8002c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c9c:	0711      	lsls	r1, r2, #28
 8002c9e:	bf44      	itt	mi
 8002ca0:	232b      	movmi	r3, #43	@ 0x2b
 8002ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8002caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cac:	d015      	beq.n	8002cda <_svfiprintf_r+0xfa>
 8002cae:	4654      	mov	r4, sl
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f04f 0c0a 	mov.w	ip, #10
 8002cb6:	9a07      	ldr	r2, [sp, #28]
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cbe:	3b30      	subs	r3, #48	@ 0x30
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	d94b      	bls.n	8002d5c <_svfiprintf_r+0x17c>
 8002cc4:	b1b0      	cbz	r0, 8002cf4 <_svfiprintf_r+0x114>
 8002cc6:	9207      	str	r2, [sp, #28]
 8002cc8:	e014      	b.n	8002cf4 <_svfiprintf_r+0x114>
 8002cca:	eba0 0308 	sub.w	r3, r0, r8
 8002cce:	fa09 f303 	lsl.w	r3, r9, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	46a2      	mov	sl, r4
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	e7d2      	b.n	8002c80 <_svfiprintf_r+0xa0>
 8002cda:	9b03      	ldr	r3, [sp, #12]
 8002cdc:	1d19      	adds	r1, r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfbb      	ittet	lt
 8002ce6:	425b      	neglt	r3, r3
 8002ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8002cec:	9307      	strge	r3, [sp, #28]
 8002cee:	9307      	strlt	r3, [sp, #28]
 8002cf0:	bfb8      	it	lt
 8002cf2:	9204      	strlt	r2, [sp, #16]
 8002cf4:	7823      	ldrb	r3, [r4, #0]
 8002cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cf8:	d10a      	bne.n	8002d10 <_svfiprintf_r+0x130>
 8002cfa:	7863      	ldrb	r3, [r4, #1]
 8002cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cfe:	d132      	bne.n	8002d66 <_svfiprintf_r+0x186>
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	3402      	adds	r4, #2
 8002d04:	1d1a      	adds	r2, r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	9203      	str	r2, [sp, #12]
 8002d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d0e:	9305      	str	r3, [sp, #20]
 8002d10:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002dc8 <_svfiprintf_r+0x1e8>
 8002d14:	2203      	movs	r2, #3
 8002d16:	4650      	mov	r0, sl
 8002d18:	7821      	ldrb	r1, [r4, #0]
 8002d1a:	f000 fbed 	bl	80034f8 <memchr>
 8002d1e:	b138      	cbz	r0, 8002d30 <_svfiprintf_r+0x150>
 8002d20:	2240      	movs	r2, #64	@ 0x40
 8002d22:	9b04      	ldr	r3, [sp, #16]
 8002d24:	eba0 000a 	sub.w	r0, r0, sl
 8002d28:	4082      	lsls	r2, r0
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	3401      	adds	r4, #1
 8002d2e:	9304      	str	r3, [sp, #16]
 8002d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d34:	2206      	movs	r2, #6
 8002d36:	4825      	ldr	r0, [pc, #148]	@ (8002dcc <_svfiprintf_r+0x1ec>)
 8002d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d3c:	f000 fbdc 	bl	80034f8 <memchr>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d036      	beq.n	8002db2 <_svfiprintf_r+0x1d2>
 8002d44:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <_svfiprintf_r+0x1f0>)
 8002d46:	bb1b      	cbnz	r3, 8002d90 <_svfiprintf_r+0x1b0>
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	f023 0307 	bic.w	r3, r3, #7
 8002d50:	3308      	adds	r3, #8
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d56:	4433      	add	r3, r6
 8002d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d5a:	e76a      	b.n	8002c32 <_svfiprintf_r+0x52>
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	2001      	movs	r0, #1
 8002d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d64:	e7a8      	b.n	8002cb8 <_svfiprintf_r+0xd8>
 8002d66:	2300      	movs	r3, #0
 8002d68:	f04f 0c0a 	mov.w	ip, #10
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	3401      	adds	r4, #1
 8002d70:	9305      	str	r3, [sp, #20]
 8002d72:	4620      	mov	r0, r4
 8002d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d78:	3a30      	subs	r2, #48	@ 0x30
 8002d7a:	2a09      	cmp	r2, #9
 8002d7c:	d903      	bls.n	8002d86 <_svfiprintf_r+0x1a6>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0c6      	beq.n	8002d10 <_svfiprintf_r+0x130>
 8002d82:	9105      	str	r1, [sp, #20]
 8002d84:	e7c4      	b.n	8002d10 <_svfiprintf_r+0x130>
 8002d86:	4604      	mov	r4, r0
 8002d88:	2301      	movs	r3, #1
 8002d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d8e:	e7f0      	b.n	8002d72 <_svfiprintf_r+0x192>
 8002d90:	ab03      	add	r3, sp, #12
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	462a      	mov	r2, r5
 8002d96:	4638      	mov	r0, r7
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <_svfiprintf_r+0x1f4>)
 8002d9a:	a904      	add	r1, sp, #16
 8002d9c:	f3af 8000 	nop.w
 8002da0:	1c42      	adds	r2, r0, #1
 8002da2:	4606      	mov	r6, r0
 8002da4:	d1d6      	bne.n	8002d54 <_svfiprintf_r+0x174>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	065b      	lsls	r3, r3, #25
 8002daa:	f53f af2d 	bmi.w	8002c08 <_svfiprintf_r+0x28>
 8002dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002db0:	e72c      	b.n	8002c0c <_svfiprintf_r+0x2c>
 8002db2:	ab03      	add	r3, sp, #12
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	462a      	mov	r2, r5
 8002db8:	4638      	mov	r0, r7
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <_svfiprintf_r+0x1f4>)
 8002dbc:	a904      	add	r1, sp, #16
 8002dbe:	f000 f9bd 	bl	800313c <_printf_i>
 8002dc2:	e7ed      	b.n	8002da0 <_svfiprintf_r+0x1c0>
 8002dc4:	0800388e 	.word	0x0800388e
 8002dc8:	08003894 	.word	0x08003894
 8002dcc:	08003898 	.word	0x08003898
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	08002b29 	.word	0x08002b29

08002dd8 <__sfputc_r>:
 8002dd8:	6893      	ldr	r3, [r2, #8]
 8002dda:	b410      	push	{r4}
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	6093      	str	r3, [r2, #8]
 8002de2:	da07      	bge.n	8002df4 <__sfputc_r+0x1c>
 8002de4:	6994      	ldr	r4, [r2, #24]
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	db01      	blt.n	8002dee <__sfputc_r+0x16>
 8002dea:	290a      	cmp	r1, #10
 8002dec:	d102      	bne.n	8002df4 <__sfputc_r+0x1c>
 8002dee:	bc10      	pop	{r4}
 8002df0:	f000 bac4 	b.w	800337c <__swbuf_r>
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	1c58      	adds	r0, r3, #1
 8002df8:	6010      	str	r0, [r2, #0]
 8002dfa:	7019      	strb	r1, [r3, #0]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	bc10      	pop	{r4}
 8002e00:	4770      	bx	lr

08002e02 <__sfputs_r>:
 8002e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e04:	4606      	mov	r6, r0
 8002e06:	460f      	mov	r7, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	18d5      	adds	r5, r2, r3
 8002e0c:	42ac      	cmp	r4, r5
 8002e0e:	d101      	bne.n	8002e14 <__sfputs_r+0x12>
 8002e10:	2000      	movs	r0, #0
 8002e12:	e007      	b.n	8002e24 <__sfputs_r+0x22>
 8002e14:	463a      	mov	r2, r7
 8002e16:	4630      	mov	r0, r6
 8002e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1c:	f7ff ffdc 	bl	8002dd8 <__sfputc_r>
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	d1f3      	bne.n	8002e0c <__sfputs_r+0xa>
 8002e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e28 <_vfiprintf_r>:
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	460d      	mov	r5, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	4698      	mov	r8, r3
 8002e32:	4606      	mov	r6, r0
 8002e34:	b09d      	sub	sp, #116	@ 0x74
 8002e36:	b118      	cbz	r0, 8002e40 <_vfiprintf_r+0x18>
 8002e38:	6a03      	ldr	r3, [r0, #32]
 8002e3a:	b90b      	cbnz	r3, 8002e40 <_vfiprintf_r+0x18>
 8002e3c:	f7ff fc42 	bl	80026c4 <__sinit>
 8002e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e42:	07d9      	lsls	r1, r3, #31
 8002e44:	d405      	bmi.n	8002e52 <_vfiprintf_r+0x2a>
 8002e46:	89ab      	ldrh	r3, [r5, #12]
 8002e48:	059a      	lsls	r2, r3, #22
 8002e4a:	d402      	bmi.n	8002e52 <_vfiprintf_r+0x2a>
 8002e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e4e:	f7ff fd72 	bl	8002936 <__retarget_lock_acquire_recursive>
 8002e52:	89ab      	ldrh	r3, [r5, #12]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	d501      	bpl.n	8002e5c <_vfiprintf_r+0x34>
 8002e58:	692b      	ldr	r3, [r5, #16]
 8002e5a:	b99b      	cbnz	r3, 8002e84 <_vfiprintf_r+0x5c>
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f000 faca 	bl	80033f8 <__swsetup_r>
 8002e64:	b170      	cbz	r0, 8002e84 <_vfiprintf_r+0x5c>
 8002e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e68:	07dc      	lsls	r4, r3, #31
 8002e6a:	d504      	bpl.n	8002e76 <_vfiprintf_r+0x4e>
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	b01d      	add	sp, #116	@ 0x74
 8002e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e76:	89ab      	ldrh	r3, [r5, #12]
 8002e78:	0598      	lsls	r0, r3, #22
 8002e7a:	d4f7      	bmi.n	8002e6c <_vfiprintf_r+0x44>
 8002e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e7e:	f7ff fd5b 	bl	8002938 <__retarget_lock_release_recursive>
 8002e82:	e7f3      	b.n	8002e6c <_vfiprintf_r+0x44>
 8002e84:	2300      	movs	r3, #0
 8002e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e88:	2320      	movs	r3, #32
 8002e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e8e:	2330      	movs	r3, #48	@ 0x30
 8002e90:	f04f 0901 	mov.w	r9, #1
 8002e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003044 <_vfiprintf_r+0x21c>
 8002e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	469a      	mov	sl, r3
 8002ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ea8:	b10a      	cbz	r2, 8002eae <_vfiprintf_r+0x86>
 8002eaa:	2a25      	cmp	r2, #37	@ 0x25
 8002eac:	d1f9      	bne.n	8002ea2 <_vfiprintf_r+0x7a>
 8002eae:	ebba 0b04 	subs.w	fp, sl, r4
 8002eb2:	d00b      	beq.n	8002ecc <_vfiprintf_r+0xa4>
 8002eb4:	465b      	mov	r3, fp
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff ffa1 	bl	8002e02 <__sfputs_r>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	f000 80a7 	beq.w	8003014 <_vfiprintf_r+0x1ec>
 8002ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ec8:	445a      	add	r2, fp
 8002eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 809f 	beq.w	8003014 <_vfiprintf_r+0x1ec>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ee0:	f10a 0a01 	add.w	sl, sl, #1
 8002ee4:	9304      	str	r3, [sp, #16]
 8002ee6:	9307      	str	r3, [sp, #28]
 8002ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8002eee:	4654      	mov	r4, sl
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef6:	4853      	ldr	r0, [pc, #332]	@ (8003044 <_vfiprintf_r+0x21c>)
 8002ef8:	f000 fafe 	bl	80034f8 <memchr>
 8002efc:	9a04      	ldr	r2, [sp, #16]
 8002efe:	b9d8      	cbnz	r0, 8002f38 <_vfiprintf_r+0x110>
 8002f00:	06d1      	lsls	r1, r2, #27
 8002f02:	bf44      	itt	mi
 8002f04:	2320      	movmi	r3, #32
 8002f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f0a:	0713      	lsls	r3, r2, #28
 8002f0c:	bf44      	itt	mi
 8002f0e:	232b      	movmi	r3, #43	@ 0x2b
 8002f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f14:	f89a 3000 	ldrb.w	r3, [sl]
 8002f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f1a:	d015      	beq.n	8002f48 <_vfiprintf_r+0x120>
 8002f1c:	4654      	mov	r4, sl
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f04f 0c0a 	mov.w	ip, #10
 8002f24:	9a07      	ldr	r2, [sp, #28]
 8002f26:	4621      	mov	r1, r4
 8002f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f2c:	3b30      	subs	r3, #48	@ 0x30
 8002f2e:	2b09      	cmp	r3, #9
 8002f30:	d94b      	bls.n	8002fca <_vfiprintf_r+0x1a2>
 8002f32:	b1b0      	cbz	r0, 8002f62 <_vfiprintf_r+0x13a>
 8002f34:	9207      	str	r2, [sp, #28]
 8002f36:	e014      	b.n	8002f62 <_vfiprintf_r+0x13a>
 8002f38:	eba0 0308 	sub.w	r3, r0, r8
 8002f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	46a2      	mov	sl, r4
 8002f44:	9304      	str	r3, [sp, #16]
 8002f46:	e7d2      	b.n	8002eee <_vfiprintf_r+0xc6>
 8002f48:	9b03      	ldr	r3, [sp, #12]
 8002f4a:	1d19      	adds	r1, r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	9103      	str	r1, [sp, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bfbb      	ittet	lt
 8002f54:	425b      	neglt	r3, r3
 8002f56:	f042 0202 	orrlt.w	r2, r2, #2
 8002f5a:	9307      	strge	r3, [sp, #28]
 8002f5c:	9307      	strlt	r3, [sp, #28]
 8002f5e:	bfb8      	it	lt
 8002f60:	9204      	strlt	r2, [sp, #16]
 8002f62:	7823      	ldrb	r3, [r4, #0]
 8002f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f66:	d10a      	bne.n	8002f7e <_vfiprintf_r+0x156>
 8002f68:	7863      	ldrb	r3, [r4, #1]
 8002f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6c:	d132      	bne.n	8002fd4 <_vfiprintf_r+0x1ac>
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	3402      	adds	r4, #2
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	9203      	str	r2, [sp, #12]
 8002f78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f7c:	9305      	str	r3, [sp, #20]
 8002f7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003048 <_vfiprintf_r+0x220>
 8002f82:	2203      	movs	r2, #3
 8002f84:	4650      	mov	r0, sl
 8002f86:	7821      	ldrb	r1, [r4, #0]
 8002f88:	f000 fab6 	bl	80034f8 <memchr>
 8002f8c:	b138      	cbz	r0, 8002f9e <_vfiprintf_r+0x176>
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	9b04      	ldr	r3, [sp, #16]
 8002f92:	eba0 000a 	sub.w	r0, r0, sl
 8002f96:	4082      	lsls	r2, r0
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	3401      	adds	r4, #1
 8002f9c:	9304      	str	r3, [sp, #16]
 8002f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa2:	2206      	movs	r2, #6
 8002fa4:	4829      	ldr	r0, [pc, #164]	@ (800304c <_vfiprintf_r+0x224>)
 8002fa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002faa:	f000 faa5 	bl	80034f8 <memchr>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d03f      	beq.n	8003032 <_vfiprintf_r+0x20a>
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <_vfiprintf_r+0x228>)
 8002fb4:	bb1b      	cbnz	r3, 8002ffe <_vfiprintf_r+0x1d6>
 8002fb6:	9b03      	ldr	r3, [sp, #12]
 8002fb8:	3307      	adds	r3, #7
 8002fba:	f023 0307 	bic.w	r3, r3, #7
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	9303      	str	r3, [sp, #12]
 8002fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fc4:	443b      	add	r3, r7
 8002fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc8:	e76a      	b.n	8002ea0 <_vfiprintf_r+0x78>
 8002fca:	460c      	mov	r4, r1
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fd2:	e7a8      	b.n	8002f26 <_vfiprintf_r+0xfe>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f04f 0c0a 	mov.w	ip, #10
 8002fda:	4619      	mov	r1, r3
 8002fdc:	3401      	adds	r4, #1
 8002fde:	9305      	str	r3, [sp, #20]
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fe6:	3a30      	subs	r2, #48	@ 0x30
 8002fe8:	2a09      	cmp	r2, #9
 8002fea:	d903      	bls.n	8002ff4 <_vfiprintf_r+0x1cc>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0c6      	beq.n	8002f7e <_vfiprintf_r+0x156>
 8002ff0:	9105      	str	r1, [sp, #20]
 8002ff2:	e7c4      	b.n	8002f7e <_vfiprintf_r+0x156>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ffc:	e7f0      	b.n	8002fe0 <_vfiprintf_r+0x1b8>
 8002ffe:	ab03      	add	r3, sp, #12
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	462a      	mov	r2, r5
 8003004:	4630      	mov	r0, r6
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <_vfiprintf_r+0x22c>)
 8003008:	a904      	add	r1, sp, #16
 800300a:	f3af 8000 	nop.w
 800300e:	4607      	mov	r7, r0
 8003010:	1c78      	adds	r0, r7, #1
 8003012:	d1d6      	bne.n	8002fc2 <_vfiprintf_r+0x19a>
 8003014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003016:	07d9      	lsls	r1, r3, #31
 8003018:	d405      	bmi.n	8003026 <_vfiprintf_r+0x1fe>
 800301a:	89ab      	ldrh	r3, [r5, #12]
 800301c:	059a      	lsls	r2, r3, #22
 800301e:	d402      	bmi.n	8003026 <_vfiprintf_r+0x1fe>
 8003020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003022:	f7ff fc89 	bl	8002938 <__retarget_lock_release_recursive>
 8003026:	89ab      	ldrh	r3, [r5, #12]
 8003028:	065b      	lsls	r3, r3, #25
 800302a:	f53f af1f 	bmi.w	8002e6c <_vfiprintf_r+0x44>
 800302e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003030:	e71e      	b.n	8002e70 <_vfiprintf_r+0x48>
 8003032:	ab03      	add	r3, sp, #12
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	462a      	mov	r2, r5
 8003038:	4630      	mov	r0, r6
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <_vfiprintf_r+0x22c>)
 800303c:	a904      	add	r1, sp, #16
 800303e:	f000 f87d 	bl	800313c <_printf_i>
 8003042:	e7e4      	b.n	800300e <_vfiprintf_r+0x1e6>
 8003044:	0800388e 	.word	0x0800388e
 8003048:	08003894 	.word	0x08003894
 800304c:	08003898 	.word	0x08003898
 8003050:	00000000 	.word	0x00000000
 8003054:	08002e03 	.word	0x08002e03

08003058 <_printf_common>:
 8003058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800305c:	4616      	mov	r6, r2
 800305e:	4698      	mov	r8, r3
 8003060:	688a      	ldr	r2, [r1, #8]
 8003062:	690b      	ldr	r3, [r1, #16]
 8003064:	4607      	mov	r7, r0
 8003066:	4293      	cmp	r3, r2
 8003068:	bfb8      	it	lt
 800306a:	4613      	movlt	r3, r2
 800306c:	6033      	str	r3, [r6, #0]
 800306e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003072:	460c      	mov	r4, r1
 8003074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003078:	b10a      	cbz	r2, 800307e <_printf_common+0x26>
 800307a:	3301      	adds	r3, #1
 800307c:	6033      	str	r3, [r6, #0]
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	0699      	lsls	r1, r3, #26
 8003082:	bf42      	ittt	mi
 8003084:	6833      	ldrmi	r3, [r6, #0]
 8003086:	3302      	addmi	r3, #2
 8003088:	6033      	strmi	r3, [r6, #0]
 800308a:	6825      	ldr	r5, [r4, #0]
 800308c:	f015 0506 	ands.w	r5, r5, #6
 8003090:	d106      	bne.n	80030a0 <_printf_common+0x48>
 8003092:	f104 0a19 	add.w	sl, r4, #25
 8003096:	68e3      	ldr	r3, [r4, #12]
 8003098:	6832      	ldr	r2, [r6, #0]
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	42ab      	cmp	r3, r5
 800309e:	dc2b      	bgt.n	80030f8 <_printf_common+0xa0>
 80030a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	3b00      	subs	r3, #0
 80030a8:	bf18      	it	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	0692      	lsls	r2, r2, #26
 80030ae:	d430      	bmi.n	8003112 <_printf_common+0xba>
 80030b0:	4641      	mov	r1, r8
 80030b2:	4638      	mov	r0, r7
 80030b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030b8:	47c8      	blx	r9
 80030ba:	3001      	adds	r0, #1
 80030bc:	d023      	beq.n	8003106 <_printf_common+0xae>
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	6922      	ldr	r2, [r4, #16]
 80030c2:	f003 0306 	and.w	r3, r3, #6
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf14      	ite	ne
 80030ca:	2500      	movne	r5, #0
 80030cc:	6833      	ldreq	r3, [r6, #0]
 80030ce:	f04f 0600 	mov.w	r6, #0
 80030d2:	bf08      	it	eq
 80030d4:	68e5      	ldreq	r5, [r4, #12]
 80030d6:	f104 041a 	add.w	r4, r4, #26
 80030da:	bf08      	it	eq
 80030dc:	1aed      	subeq	r5, r5, r3
 80030de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030e2:	bf08      	it	eq
 80030e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bfc4      	itt	gt
 80030ec:	1a9b      	subgt	r3, r3, r2
 80030ee:	18ed      	addgt	r5, r5, r3
 80030f0:	42b5      	cmp	r5, r6
 80030f2:	d11a      	bne.n	800312a <_printf_common+0xd2>
 80030f4:	2000      	movs	r0, #0
 80030f6:	e008      	b.n	800310a <_printf_common+0xb2>
 80030f8:	2301      	movs	r3, #1
 80030fa:	4652      	mov	r2, sl
 80030fc:	4641      	mov	r1, r8
 80030fe:	4638      	mov	r0, r7
 8003100:	47c8      	blx	r9
 8003102:	3001      	adds	r0, #1
 8003104:	d103      	bne.n	800310e <_printf_common+0xb6>
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800310e:	3501      	adds	r5, #1
 8003110:	e7c1      	b.n	8003096 <_printf_common+0x3e>
 8003112:	2030      	movs	r0, #48	@ 0x30
 8003114:	18e1      	adds	r1, r4, r3
 8003116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003120:	4422      	add	r2, r4
 8003122:	3302      	adds	r3, #2
 8003124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003128:	e7c2      	b.n	80030b0 <_printf_common+0x58>
 800312a:	2301      	movs	r3, #1
 800312c:	4622      	mov	r2, r4
 800312e:	4641      	mov	r1, r8
 8003130:	4638      	mov	r0, r7
 8003132:	47c8      	blx	r9
 8003134:	3001      	adds	r0, #1
 8003136:	d0e6      	beq.n	8003106 <_printf_common+0xae>
 8003138:	3601      	adds	r6, #1
 800313a:	e7d9      	b.n	80030f0 <_printf_common+0x98>

0800313c <_printf_i>:
 800313c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003140:	7e0f      	ldrb	r7, [r1, #24]
 8003142:	4691      	mov	r9, r2
 8003144:	2f78      	cmp	r7, #120	@ 0x78
 8003146:	4680      	mov	r8, r0
 8003148:	460c      	mov	r4, r1
 800314a:	469a      	mov	sl, r3
 800314c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800314e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003152:	d807      	bhi.n	8003164 <_printf_i+0x28>
 8003154:	2f62      	cmp	r7, #98	@ 0x62
 8003156:	d80a      	bhi.n	800316e <_printf_i+0x32>
 8003158:	2f00      	cmp	r7, #0
 800315a:	f000 80d3 	beq.w	8003304 <_printf_i+0x1c8>
 800315e:	2f58      	cmp	r7, #88	@ 0x58
 8003160:	f000 80ba 	beq.w	80032d8 <_printf_i+0x19c>
 8003164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800316c:	e03a      	b.n	80031e4 <_printf_i+0xa8>
 800316e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003172:	2b15      	cmp	r3, #21
 8003174:	d8f6      	bhi.n	8003164 <_printf_i+0x28>
 8003176:	a101      	add	r1, pc, #4	@ (adr r1, 800317c <_printf_i+0x40>)
 8003178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800317c:	080031d5 	.word	0x080031d5
 8003180:	080031e9 	.word	0x080031e9
 8003184:	08003165 	.word	0x08003165
 8003188:	08003165 	.word	0x08003165
 800318c:	08003165 	.word	0x08003165
 8003190:	08003165 	.word	0x08003165
 8003194:	080031e9 	.word	0x080031e9
 8003198:	08003165 	.word	0x08003165
 800319c:	08003165 	.word	0x08003165
 80031a0:	08003165 	.word	0x08003165
 80031a4:	08003165 	.word	0x08003165
 80031a8:	080032eb 	.word	0x080032eb
 80031ac:	08003213 	.word	0x08003213
 80031b0:	080032a5 	.word	0x080032a5
 80031b4:	08003165 	.word	0x08003165
 80031b8:	08003165 	.word	0x08003165
 80031bc:	0800330d 	.word	0x0800330d
 80031c0:	08003165 	.word	0x08003165
 80031c4:	08003213 	.word	0x08003213
 80031c8:	08003165 	.word	0x08003165
 80031cc:	08003165 	.word	0x08003165
 80031d0:	080032ad 	.word	0x080032ad
 80031d4:	6833      	ldr	r3, [r6, #0]
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6032      	str	r2, [r6, #0]
 80031dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031e4:	2301      	movs	r3, #1
 80031e6:	e09e      	b.n	8003326 <_printf_i+0x1ea>
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	1d19      	adds	r1, r3, #4
 80031ee:	6031      	str	r1, [r6, #0]
 80031f0:	0606      	lsls	r6, r0, #24
 80031f2:	d501      	bpl.n	80031f8 <_printf_i+0xbc>
 80031f4:	681d      	ldr	r5, [r3, #0]
 80031f6:	e003      	b.n	8003200 <_printf_i+0xc4>
 80031f8:	0645      	lsls	r5, r0, #25
 80031fa:	d5fb      	bpl.n	80031f4 <_printf_i+0xb8>
 80031fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003200:	2d00      	cmp	r5, #0
 8003202:	da03      	bge.n	800320c <_printf_i+0xd0>
 8003204:	232d      	movs	r3, #45	@ 0x2d
 8003206:	426d      	negs	r5, r5
 8003208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800320c:	230a      	movs	r3, #10
 800320e:	4859      	ldr	r0, [pc, #356]	@ (8003374 <_printf_i+0x238>)
 8003210:	e011      	b.n	8003236 <_printf_i+0xfa>
 8003212:	6821      	ldr	r1, [r4, #0]
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	0608      	lsls	r0, r1, #24
 8003218:	f853 5b04 	ldr.w	r5, [r3], #4
 800321c:	d402      	bmi.n	8003224 <_printf_i+0xe8>
 800321e:	0649      	lsls	r1, r1, #25
 8003220:	bf48      	it	mi
 8003222:	b2ad      	uxthmi	r5, r5
 8003224:	2f6f      	cmp	r7, #111	@ 0x6f
 8003226:	6033      	str	r3, [r6, #0]
 8003228:	bf14      	ite	ne
 800322a:	230a      	movne	r3, #10
 800322c:	2308      	moveq	r3, #8
 800322e:	4851      	ldr	r0, [pc, #324]	@ (8003374 <_printf_i+0x238>)
 8003230:	2100      	movs	r1, #0
 8003232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003236:	6866      	ldr	r6, [r4, #4]
 8003238:	2e00      	cmp	r6, #0
 800323a:	bfa8      	it	ge
 800323c:	6821      	ldrge	r1, [r4, #0]
 800323e:	60a6      	str	r6, [r4, #8]
 8003240:	bfa4      	itt	ge
 8003242:	f021 0104 	bicge.w	r1, r1, #4
 8003246:	6021      	strge	r1, [r4, #0]
 8003248:	b90d      	cbnz	r5, 800324e <_printf_i+0x112>
 800324a:	2e00      	cmp	r6, #0
 800324c:	d04b      	beq.n	80032e6 <_printf_i+0x1aa>
 800324e:	4616      	mov	r6, r2
 8003250:	fbb5 f1f3 	udiv	r1, r5, r3
 8003254:	fb03 5711 	mls	r7, r3, r1, r5
 8003258:	5dc7      	ldrb	r7, [r0, r7]
 800325a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800325e:	462f      	mov	r7, r5
 8003260:	42bb      	cmp	r3, r7
 8003262:	460d      	mov	r5, r1
 8003264:	d9f4      	bls.n	8003250 <_printf_i+0x114>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d10b      	bne.n	8003282 <_printf_i+0x146>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	07df      	lsls	r7, r3, #31
 800326e:	d508      	bpl.n	8003282 <_printf_i+0x146>
 8003270:	6923      	ldr	r3, [r4, #16]
 8003272:	6861      	ldr	r1, [r4, #4]
 8003274:	4299      	cmp	r1, r3
 8003276:	bfde      	ittt	le
 8003278:	2330      	movle	r3, #48	@ 0x30
 800327a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800327e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003282:	1b92      	subs	r2, r2, r6
 8003284:	6122      	str	r2, [r4, #16]
 8003286:	464b      	mov	r3, r9
 8003288:	4621      	mov	r1, r4
 800328a:	4640      	mov	r0, r8
 800328c:	f8cd a000 	str.w	sl, [sp]
 8003290:	aa03      	add	r2, sp, #12
 8003292:	f7ff fee1 	bl	8003058 <_printf_common>
 8003296:	3001      	adds	r0, #1
 8003298:	d14a      	bne.n	8003330 <_printf_i+0x1f4>
 800329a:	f04f 30ff 	mov.w	r0, #4294967295
 800329e:	b004      	add	sp, #16
 80032a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	f043 0320 	orr.w	r3, r3, #32
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	2778      	movs	r7, #120	@ 0x78
 80032ae:	4832      	ldr	r0, [pc, #200]	@ (8003378 <_printf_i+0x23c>)
 80032b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	6831      	ldr	r1, [r6, #0]
 80032b8:	061f      	lsls	r7, r3, #24
 80032ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80032be:	d402      	bmi.n	80032c6 <_printf_i+0x18a>
 80032c0:	065f      	lsls	r7, r3, #25
 80032c2:	bf48      	it	mi
 80032c4:	b2ad      	uxthmi	r5, r5
 80032c6:	6031      	str	r1, [r6, #0]
 80032c8:	07d9      	lsls	r1, r3, #31
 80032ca:	bf44      	itt	mi
 80032cc:	f043 0320 	orrmi.w	r3, r3, #32
 80032d0:	6023      	strmi	r3, [r4, #0]
 80032d2:	b11d      	cbz	r5, 80032dc <_printf_i+0x1a0>
 80032d4:	2310      	movs	r3, #16
 80032d6:	e7ab      	b.n	8003230 <_printf_i+0xf4>
 80032d8:	4826      	ldr	r0, [pc, #152]	@ (8003374 <_printf_i+0x238>)
 80032da:	e7e9      	b.n	80032b0 <_printf_i+0x174>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	f023 0320 	bic.w	r3, r3, #32
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	e7f6      	b.n	80032d4 <_printf_i+0x198>
 80032e6:	4616      	mov	r6, r2
 80032e8:	e7bd      	b.n	8003266 <_printf_i+0x12a>
 80032ea:	6833      	ldr	r3, [r6, #0]
 80032ec:	6825      	ldr	r5, [r4, #0]
 80032ee:	1d18      	adds	r0, r3, #4
 80032f0:	6961      	ldr	r1, [r4, #20]
 80032f2:	6030      	str	r0, [r6, #0]
 80032f4:	062e      	lsls	r6, r5, #24
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	d501      	bpl.n	80032fe <_printf_i+0x1c2>
 80032fa:	6019      	str	r1, [r3, #0]
 80032fc:	e002      	b.n	8003304 <_printf_i+0x1c8>
 80032fe:	0668      	lsls	r0, r5, #25
 8003300:	d5fb      	bpl.n	80032fa <_printf_i+0x1be>
 8003302:	8019      	strh	r1, [r3, #0]
 8003304:	2300      	movs	r3, #0
 8003306:	4616      	mov	r6, r2
 8003308:	6123      	str	r3, [r4, #16]
 800330a:	e7bc      	b.n	8003286 <_printf_i+0x14a>
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	2100      	movs	r1, #0
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	6032      	str	r2, [r6, #0]
 8003314:	681e      	ldr	r6, [r3, #0]
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	4630      	mov	r0, r6
 800331a:	f000 f8ed 	bl	80034f8 <memchr>
 800331e:	b108      	cbz	r0, 8003324 <_printf_i+0x1e8>
 8003320:	1b80      	subs	r0, r0, r6
 8003322:	6060      	str	r0, [r4, #4]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	6123      	str	r3, [r4, #16]
 8003328:	2300      	movs	r3, #0
 800332a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800332e:	e7aa      	b.n	8003286 <_printf_i+0x14a>
 8003330:	4632      	mov	r2, r6
 8003332:	4649      	mov	r1, r9
 8003334:	4640      	mov	r0, r8
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	47d0      	blx	sl
 800333a:	3001      	adds	r0, #1
 800333c:	d0ad      	beq.n	800329a <_printf_i+0x15e>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	079b      	lsls	r3, r3, #30
 8003342:	d413      	bmi.n	800336c <_printf_i+0x230>
 8003344:	68e0      	ldr	r0, [r4, #12]
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	4298      	cmp	r0, r3
 800334a:	bfb8      	it	lt
 800334c:	4618      	movlt	r0, r3
 800334e:	e7a6      	b.n	800329e <_printf_i+0x162>
 8003350:	2301      	movs	r3, #1
 8003352:	4632      	mov	r2, r6
 8003354:	4649      	mov	r1, r9
 8003356:	4640      	mov	r0, r8
 8003358:	47d0      	blx	sl
 800335a:	3001      	adds	r0, #1
 800335c:	d09d      	beq.n	800329a <_printf_i+0x15e>
 800335e:	3501      	adds	r5, #1
 8003360:	68e3      	ldr	r3, [r4, #12]
 8003362:	9903      	ldr	r1, [sp, #12]
 8003364:	1a5b      	subs	r3, r3, r1
 8003366:	42ab      	cmp	r3, r5
 8003368:	dcf2      	bgt.n	8003350 <_printf_i+0x214>
 800336a:	e7eb      	b.n	8003344 <_printf_i+0x208>
 800336c:	2500      	movs	r5, #0
 800336e:	f104 0619 	add.w	r6, r4, #25
 8003372:	e7f5      	b.n	8003360 <_printf_i+0x224>
 8003374:	0800389f 	.word	0x0800389f
 8003378:	080038b0 	.word	0x080038b0

0800337c <__swbuf_r>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	460e      	mov	r6, r1
 8003380:	4614      	mov	r4, r2
 8003382:	4605      	mov	r5, r0
 8003384:	b118      	cbz	r0, 800338e <__swbuf_r+0x12>
 8003386:	6a03      	ldr	r3, [r0, #32]
 8003388:	b90b      	cbnz	r3, 800338e <__swbuf_r+0x12>
 800338a:	f7ff f99b 	bl	80026c4 <__sinit>
 800338e:	69a3      	ldr	r3, [r4, #24]
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	071a      	lsls	r2, r3, #28
 8003396:	d501      	bpl.n	800339c <__swbuf_r+0x20>
 8003398:	6923      	ldr	r3, [r4, #16]
 800339a:	b943      	cbnz	r3, 80033ae <__swbuf_r+0x32>
 800339c:	4621      	mov	r1, r4
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f82a 	bl	80033f8 <__swsetup_r>
 80033a4:	b118      	cbz	r0, 80033ae <__swbuf_r+0x32>
 80033a6:	f04f 37ff 	mov.w	r7, #4294967295
 80033aa:	4638      	mov	r0, r7
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	6922      	ldr	r2, [r4, #16]
 80033b2:	b2f6      	uxtb	r6, r6
 80033b4:	1a98      	subs	r0, r3, r2
 80033b6:	6963      	ldr	r3, [r4, #20]
 80033b8:	4637      	mov	r7, r6
 80033ba:	4283      	cmp	r3, r0
 80033bc:	dc05      	bgt.n	80033ca <__swbuf_r+0x4e>
 80033be:	4621      	mov	r1, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	f7ff f8b7 	bl	8002534 <_fflush_r>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d1ed      	bne.n	80033a6 <__swbuf_r+0x2a>
 80033ca:	68a3      	ldr	r3, [r4, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60a3      	str	r3, [r4, #8]
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	6022      	str	r2, [r4, #0]
 80033d6:	701e      	strb	r6, [r3, #0]
 80033d8:	6962      	ldr	r2, [r4, #20]
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	429a      	cmp	r2, r3
 80033de:	d004      	beq.n	80033ea <__swbuf_r+0x6e>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	07db      	lsls	r3, r3, #31
 80033e4:	d5e1      	bpl.n	80033aa <__swbuf_r+0x2e>
 80033e6:	2e0a      	cmp	r6, #10
 80033e8:	d1df      	bne.n	80033aa <__swbuf_r+0x2e>
 80033ea:	4621      	mov	r1, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7ff f8a1 	bl	8002534 <_fflush_r>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d0d9      	beq.n	80033aa <__swbuf_r+0x2e>
 80033f6:	e7d6      	b.n	80033a6 <__swbuf_r+0x2a>

080033f8 <__swsetup_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4b29      	ldr	r3, [pc, #164]	@ (80034a0 <__swsetup_r+0xa8>)
 80033fc:	4605      	mov	r5, r0
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	460c      	mov	r4, r1
 8003402:	b118      	cbz	r0, 800340c <__swsetup_r+0x14>
 8003404:	6a03      	ldr	r3, [r0, #32]
 8003406:	b90b      	cbnz	r3, 800340c <__swsetup_r+0x14>
 8003408:	f7ff f95c 	bl	80026c4 <__sinit>
 800340c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003410:	0719      	lsls	r1, r3, #28
 8003412:	d422      	bmi.n	800345a <__swsetup_r+0x62>
 8003414:	06da      	lsls	r2, r3, #27
 8003416:	d407      	bmi.n	8003428 <__swsetup_r+0x30>
 8003418:	2209      	movs	r2, #9
 800341a:	602a      	str	r2, [r5, #0]
 800341c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	e033      	b.n	8003490 <__swsetup_r+0x98>
 8003428:	0758      	lsls	r0, r3, #29
 800342a:	d512      	bpl.n	8003452 <__swsetup_r+0x5a>
 800342c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800342e:	b141      	cbz	r1, 8003442 <__swsetup_r+0x4a>
 8003430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003434:	4299      	cmp	r1, r3
 8003436:	d002      	beq.n	800343e <__swsetup_r+0x46>
 8003438:	4628      	mov	r0, r5
 800343a:	f7ff fa7f 	bl	800293c <_free_r>
 800343e:	2300      	movs	r3, #0
 8003440:	6363      	str	r3, [r4, #52]	@ 0x34
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	2300      	movs	r3, #0
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	81a3      	strh	r3, [r4, #12]
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	b94b      	cbnz	r3, 8003472 <__swsetup_r+0x7a>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003468:	d003      	beq.n	8003472 <__swsetup_r+0x7a>
 800346a:	4621      	mov	r1, r4
 800346c:	4628      	mov	r0, r5
 800346e:	f000 f8b2 	bl	80035d6 <__smakebuf_r>
 8003472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003476:	f013 0201 	ands.w	r2, r3, #1
 800347a:	d00a      	beq.n	8003492 <__swsetup_r+0x9a>
 800347c:	2200      	movs	r2, #0
 800347e:	60a2      	str	r2, [r4, #8]
 8003480:	6962      	ldr	r2, [r4, #20]
 8003482:	4252      	negs	r2, r2
 8003484:	61a2      	str	r2, [r4, #24]
 8003486:	6922      	ldr	r2, [r4, #16]
 8003488:	b942      	cbnz	r2, 800349c <__swsetup_r+0xa4>
 800348a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800348e:	d1c5      	bne.n	800341c <__swsetup_r+0x24>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	0799      	lsls	r1, r3, #30
 8003494:	bf58      	it	pl
 8003496:	6962      	ldrpl	r2, [r4, #20]
 8003498:	60a2      	str	r2, [r4, #8]
 800349a:	e7f4      	b.n	8003486 <__swsetup_r+0x8e>
 800349c:	2000      	movs	r0, #0
 800349e:	e7f7      	b.n	8003490 <__swsetup_r+0x98>
 80034a0:	20000030 	.word	0x20000030

080034a4 <memmove>:
 80034a4:	4288      	cmp	r0, r1
 80034a6:	b510      	push	{r4, lr}
 80034a8:	eb01 0402 	add.w	r4, r1, r2
 80034ac:	d902      	bls.n	80034b4 <memmove+0x10>
 80034ae:	4284      	cmp	r4, r0
 80034b0:	4623      	mov	r3, r4
 80034b2:	d807      	bhi.n	80034c4 <memmove+0x20>
 80034b4:	1e43      	subs	r3, r0, #1
 80034b6:	42a1      	cmp	r1, r4
 80034b8:	d008      	beq.n	80034cc <memmove+0x28>
 80034ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034c2:	e7f8      	b.n	80034b6 <memmove+0x12>
 80034c4:	4601      	mov	r1, r0
 80034c6:	4402      	add	r2, r0
 80034c8:	428a      	cmp	r2, r1
 80034ca:	d100      	bne.n	80034ce <memmove+0x2a>
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034d6:	e7f7      	b.n	80034c8 <memmove+0x24>

080034d8 <_sbrk_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	2300      	movs	r3, #0
 80034dc:	4d05      	ldr	r5, [pc, #20]	@ (80034f4 <_sbrk_r+0x1c>)
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fc fffe 	bl	80004e4 <_sbrk>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_sbrk_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_sbrk_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	20000338 	.word	0x20000338

080034f8 <memchr>:
 80034f8:	4603      	mov	r3, r0
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	4402      	add	r2, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	4618      	mov	r0, r3
 8003504:	d101      	bne.n	800350a <memchr+0x12>
 8003506:	2000      	movs	r0, #0
 8003508:	e003      	b.n	8003512 <memchr+0x1a>
 800350a:	7804      	ldrb	r4, [r0, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	428c      	cmp	r4, r1
 8003510:	d1f6      	bne.n	8003500 <memchr+0x8>
 8003512:	bd10      	pop	{r4, pc}

08003514 <memcpy>:
 8003514:	440a      	add	r2, r1
 8003516:	4291      	cmp	r1, r2
 8003518:	f100 33ff 	add.w	r3, r0, #4294967295
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	4770      	bx	lr
 8003520:	b510      	push	{r4, lr}
 8003522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003526:	4291      	cmp	r1, r2
 8003528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352c:	d1f9      	bne.n	8003522 <memcpy+0xe>
 800352e:	bd10      	pop	{r4, pc}

08003530 <_realloc_r>:
 8003530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003534:	4680      	mov	r8, r0
 8003536:	4615      	mov	r5, r2
 8003538:	460c      	mov	r4, r1
 800353a:	b921      	cbnz	r1, 8003546 <_realloc_r+0x16>
 800353c:	4611      	mov	r1, r2
 800353e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003542:	f7ff ba65 	b.w	8002a10 <_malloc_r>
 8003546:	b92a      	cbnz	r2, 8003554 <_realloc_r+0x24>
 8003548:	f7ff f9f8 	bl	800293c <_free_r>
 800354c:	2400      	movs	r4, #0
 800354e:	4620      	mov	r0, r4
 8003550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003554:	f000 f89e 	bl	8003694 <_malloc_usable_size_r>
 8003558:	4285      	cmp	r5, r0
 800355a:	4606      	mov	r6, r0
 800355c:	d802      	bhi.n	8003564 <_realloc_r+0x34>
 800355e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003562:	d8f4      	bhi.n	800354e <_realloc_r+0x1e>
 8003564:	4629      	mov	r1, r5
 8003566:	4640      	mov	r0, r8
 8003568:	f7ff fa52 	bl	8002a10 <_malloc_r>
 800356c:	4607      	mov	r7, r0
 800356e:	2800      	cmp	r0, #0
 8003570:	d0ec      	beq.n	800354c <_realloc_r+0x1c>
 8003572:	42b5      	cmp	r5, r6
 8003574:	462a      	mov	r2, r5
 8003576:	4621      	mov	r1, r4
 8003578:	bf28      	it	cs
 800357a:	4632      	movcs	r2, r6
 800357c:	f7ff ffca 	bl	8003514 <memcpy>
 8003580:	4621      	mov	r1, r4
 8003582:	4640      	mov	r0, r8
 8003584:	f7ff f9da 	bl	800293c <_free_r>
 8003588:	463c      	mov	r4, r7
 800358a:	e7e0      	b.n	800354e <_realloc_r+0x1e>

0800358c <__swhatbuf_r>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	460c      	mov	r4, r1
 8003590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003594:	4615      	mov	r5, r2
 8003596:	2900      	cmp	r1, #0
 8003598:	461e      	mov	r6, r3
 800359a:	b096      	sub	sp, #88	@ 0x58
 800359c:	da0c      	bge.n	80035b8 <__swhatbuf_r+0x2c>
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	2100      	movs	r1, #0
 80035a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035a6:	bf14      	ite	ne
 80035a8:	2340      	movne	r3, #64	@ 0x40
 80035aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035ae:	2000      	movs	r0, #0
 80035b0:	6031      	str	r1, [r6, #0]
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	b016      	add	sp, #88	@ 0x58
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	466a      	mov	r2, sp
 80035ba:	f000 f849 	bl	8003650 <_fstat_r>
 80035be:	2800      	cmp	r0, #0
 80035c0:	dbed      	blt.n	800359e <__swhatbuf_r+0x12>
 80035c2:	9901      	ldr	r1, [sp, #4]
 80035c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035cc:	4259      	negs	r1, r3
 80035ce:	4159      	adcs	r1, r3
 80035d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d4:	e7eb      	b.n	80035ae <__swhatbuf_r+0x22>

080035d6 <__smakebuf_r>:
 80035d6:	898b      	ldrh	r3, [r1, #12]
 80035d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035da:	079d      	lsls	r5, r3, #30
 80035dc:	4606      	mov	r6, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	d507      	bpl.n	80035f2 <__smakebuf_r+0x1c>
 80035e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	6123      	str	r3, [r4, #16]
 80035ea:	2301      	movs	r3, #1
 80035ec:	6163      	str	r3, [r4, #20]
 80035ee:	b003      	add	sp, #12
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	466a      	mov	r2, sp
 80035f4:	ab01      	add	r3, sp, #4
 80035f6:	f7ff ffc9 	bl	800358c <__swhatbuf_r>
 80035fa:	9f00      	ldr	r7, [sp, #0]
 80035fc:	4605      	mov	r5, r0
 80035fe:	4639      	mov	r1, r7
 8003600:	4630      	mov	r0, r6
 8003602:	f7ff fa05 	bl	8002a10 <_malloc_r>
 8003606:	b948      	cbnz	r0, 800361c <__smakebuf_r+0x46>
 8003608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360c:	059a      	lsls	r2, r3, #22
 800360e:	d4ee      	bmi.n	80035ee <__smakebuf_r+0x18>
 8003610:	f023 0303 	bic.w	r3, r3, #3
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	e7e2      	b.n	80035e2 <__smakebuf_r+0xc>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	9b01      	ldr	r3, [sp, #4]
 800362a:	6020      	str	r0, [r4, #0]
 800362c:	b15b      	cbz	r3, 8003646 <__smakebuf_r+0x70>
 800362e:	4630      	mov	r0, r6
 8003630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003634:	f000 f81e 	bl	8003674 <_isatty_r>
 8003638:	b128      	cbz	r0, 8003646 <__smakebuf_r+0x70>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f023 0303 	bic.w	r3, r3, #3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	431d      	orrs	r5, r3
 800364a:	81a5      	strh	r5, [r4, #12]
 800364c:	e7cf      	b.n	80035ee <__smakebuf_r+0x18>
	...

08003650 <_fstat_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	2300      	movs	r3, #0
 8003654:	4d06      	ldr	r5, [pc, #24]	@ (8003670 <_fstat_r+0x20>)
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	f7fe fd68 	bl	8002132 <_fstat>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d102      	bne.n	800366c <_fstat_r+0x1c>
 8003666:	682b      	ldr	r3, [r5, #0]
 8003668:	b103      	cbz	r3, 800366c <_fstat_r+0x1c>
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	bd38      	pop	{r3, r4, r5, pc}
 800366e:	bf00      	nop
 8003670:	20000338 	.word	0x20000338

08003674 <_isatty_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	2300      	movs	r3, #0
 8003678:	4d05      	ldr	r5, [pc, #20]	@ (8003690 <_isatty_r+0x1c>)
 800367a:	4604      	mov	r4, r0
 800367c:	4608      	mov	r0, r1
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	f7fe feba 	bl	80023f8 <_isatty>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d102      	bne.n	800368e <_isatty_r+0x1a>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	b103      	cbz	r3, 800368e <_isatty_r+0x1a>
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	20000338 	.word	0x20000338

08003694 <_malloc_usable_size_r>:
 8003694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003698:	1f18      	subs	r0, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfbc      	itt	lt
 800369e:	580b      	ldrlt	r3, [r1, r0]
 80036a0:	18c0      	addlt	r0, r0, r3
 80036a2:	4770      	bx	lr

080036a4 <_init>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr

080036b0 <_fini>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr
